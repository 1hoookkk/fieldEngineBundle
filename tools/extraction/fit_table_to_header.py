#!/usr/bin/env python3
# fit_table_to_header.py
# Usage: python fit_table_to_header.py <csvfile> <out_header.h> --name T1_table --npoints 128
# Requires: numpy. scipy optional for smoother spline.

import sys, os, argparse
import numpy as np

try:
    from scipy.interpolate import UnivariateSpline
    SCIPY_AVAILABLE = True
except Exception:
    SCIPY_AVAILABLE = False

def load_csv(path):
    arr = np.loadtxt(path, delimiter=',')
    return arr

def resample_table(arr, npoints=128):
    # arr -> resample to npoints (linear interp)
    x = np.linspace(0, 1, arr.size)
    xi = np.linspace(0, 1, npoints)
    yi = np.interp(xi, x, arr)
    return yi

def fit_and_emit(arr, out_h, name='TABLE', npoints=128, comment=''):
    # If monotonic and positive, consider log-fit fallback
    arr = np.asarray(arr, dtype=float)
    yi = resample_table(arr, npoints)
    # prepare C++ array with full precision
    lines = []
    lines.append("// Autogenerated by fit_table_to_header.py")
    if comment:
        lines.append("// " + comment)
    lines.append("#pragma once")
    lines.append("#include <cstddef>")
    lines.append(f"namespace ZPlaneTables {{")
    lines.append(f"static constexpr size_t {name}_LEN = {npoints};")
    lines.append(f"static constexpr float {name}[{npoints}] = {{")
    for v in yi:
        # Ensure proper floating point format
        val_str = f"{float(v):.9g}"
        if '.' not in val_str and 'e' not in val_str and 'E' not in val_str:
            val_str += '.0'
        lines.append(f"    {val_str}f,")
    lines.append("};")
    # inline lookup
    lines.append(f"inline float {name}_lookup(float t) {{")
    lines.append("    if (t <= 0.0f) return " + f"{name}[0];")
    lines.append("    if (t >= 1.0f) return " + f"{name}[{npoints-1}];")
    lines.append("    float x = t * float(" + f"{npoints-1}" + ");")
    lines.append("    int i = int(x);")
    lines.append("    float frac = x - float(i);")
    lines.append("    return {name}[i] + frac * ({name}[i+1] - {name}[i]);".format(name=name))
    lines.append("}")
    lines.append("} // namespace ZPlaneTables")
    content = "\n".join(lines) + "\n"
    with open(out_h, 'w') as f:
        f.write(content)
    print("Wrote", out_h)

def main():
    p = argparse.ArgumentParser()
    p.add_argument('csv')
    p.add_argument('out_h')
    p.add_argument('--name', default='T1_TABLE')
    p.add_argument('--npoints', type=int, default=128)
    p.add_argument('--comment', default='')
    args = p.parse_args()
    arr = load_csv(args.csv)
    fit_and_emit(arr, args.out_h, name=args.name, npoints=args.npoints, comment=args.comment)

if __name__ == '__main__':
    main()