zip,path,type,summary
SpectralResearchVault.zip,SpectralResearchVault/Analog/CEM3389Filter/CEM3389Filter.cpp,.cpp,"{""sample"": ""/******************************************************************************\r\n * File: CEM3389Filter.cpp \r\n * Description: Implementation of secret E-mu Audity CEM3389 filter\r\n * \r\n * The \""secret s""}"
SpectralResearchVault.zip,SpectralResearchVault/Analog/CEM3389Filter/CEM3389Filter.h,.h,"{""sample"": ""/******************************************************************************\r\n * File: CEM3389Filter.h\r\n * Description: Secret E-mu Audity CEM3389 filter emulation (INVISIBLE TO USER)\r\n * \r\n * This""}"
SpectralResearchVault.zip,SpectralResearchVault/Analog/MorphFilter/MorphFilter.h,.h,"{""sample"": ""#pragma once\r\n#include <JuceHeader.h>\r\n#include <array>\r\n\r\n/**\r\n * RT-safe morphing filter with curated responses\r\n * E-mu Audity-inspired multimode filter with smooth morphing\r\n */\r\nclass MorphFilter""}"
SpectralResearchVault.zip,SpectralResearchVault/PluginConcepts/VintageCanvas/README.md,.md,"{""headings"": [""VintageCanvas - Paint-Controlled Analog Processor\r""], ""bullets"": [""**CEM3389Filter** - Hidden EMU Audity analog modeling  \r"", ""**Paint Interface** - Borrowed from SpectralCanvasLite\r"", ""**Real-time Parameter Mapping** - Paint gestures control filter parameters\r"", ""\""Vintage Tape\""\r"", ""\""Tube Saturation\"" \r"", ""\""EMU Classic\""\r"", ""\""Warm Vinyl\""\r"", ""\""Analog Console\""\r"", ""**Hidden Complexity**: Users never see filter parameters\r"", ""**Immediate Feedback**: Paint and hear results instantly  \r""]}"
SpectralResearchVault.zip,SpectralResearchVault/PluginConcepts/VintageCanvas/VintageCanvasProcessor.h,.h,"{""sample"": ""#pragma once\r\n#include <JuceHeader.h>\r\n#include \""../../Analog/CEM3389Filter/CEM3389Filter.h\""\r\n\r\n/**\r\n * VintageCanvas - Paint-Controlled Analog Processor\r\n * \r\n * Simple audio processor that applies a""}"
SpectralResearchVault.zip,SpectralResearchVault/README.md,.md,"{""headings"": [""SpectralResearchVault - Curated DSP Components\r""], ""bullets"": [""**CEM3389Filter** (285 lines) - EMU Audity analog filter with paint integration\r"", ""**MorphFilter** (60 lines) - State Variable Filter with smooth morphing\r"", ""**Z-PlaneSnapshot** (127 lines) - Clean Z-plane implementation with morphing\r"", ""**AtomicOscillator** (43 lines) - Lock-free RT-safe oscillator\r"", ""**SpectralBlur** - Gaussian kernel convolution for frequency blur\r"", ""**SpectralFreeze** - Freeze specific frequency bands\r"", ""**Paint Integration** - Map paint gestures to parameters\r""]}"
EMU_ZPlane_Vault - 1.zip,EMU_ZPlane_Vault/AUTHENTIC/core/AuthenticEMUZPlane.cpp,.cpp,"{""sample"": ""#include \""EMUFilter.h\""\r\n#include <cmath>\r\n\r\nAuthenticEMUZPlane::AuthenticEMUZPlane()\r\n{\r\n    // Initialize with viral defaults for immediate appeal\r\n    setMorphPair(VowelAe_to_VowelOo);\r\n    setMorph""}"
EMU_ZPlane_Vault - 1.zip,EMU_ZPlane_Vault/AUTHENTIC/core/ZPlaneCoefficientBank.cpp,.cpp,"{""sample"": ""#include \""ZPlaneCoefficientBank.h\""\r\n#include <cassert>\r\n\r\nnamespace zplane {\r\n\r\nZPlaneCoefficientBank::ZPlaneCoefficientBank() {\r\n    // Placeholder clean-room examples so wiring compiles; replace wit""}"
EMU_ZPlane_Vault - 1.zip,EMU_ZPlane_Vault/AUTHENTIC/core/ZPlaneCoefficientBank.h,.h,"{""sample"": ""#pragma once\r\n\r\n#include <array>\r\n#include <cstdint>\r\n\r\nnamespace zplane {\r\n\r\n// Maximum number of biquad sections per model\r\nconstexpr int kMaxSections = 6; // up to 12 poles in conjugate pairs\r\n\r\n//""}"
EMU_ZPlane_Vault - 1.zip,EMU_ZPlane_Vault/AUTHENTIC/core/ZPlaneFilter.h,.h,"{""sample"": ""#pragma once\r\n#include <array>\r\n#include <atomic>\r\n#include <algorithm>\r\n#include <cmath>\r\n#include <cfloat>\r\n#include <numbers>\r\n#include <juce_dsp/juce_dsp.h>\r\n\r\n// Minimal self-contained Z-plane mo""}"
EMU_ZPlane_Vault - 1.zip,EMU_ZPlane_Vault/AUTHENTIC/core/ZPlaneHelpers.h,.h,"{""sample"": ""#pragma once\r\n#include <complex>\r\n#include <cmath>\r\n#include <vector>\r\n\r\n#ifndef M_PI\r\n#define M_PI 3.14159265358979323846\r\n#endif\r\n\r\nnamespace ZPlaneHelpers {\r\n\r\n// Convert a pole (complex) to stable""}"
EMU_ZPlane_Vault - 1.zip,EMU_ZPlane_Vault/AUTHENTIC/core/ZPlaneUtils.h,.h,"{""sample"": ""#pragma once\r\n\r\n#include <cmath>\r\n#if defined(__SSE__) || defined(__SSE2__)\r\n  #include <xmmintrin.h>\r\n#endif\r\n#include <algorithm>\r\n\r\nnamespace zplane {\r\n\r\ninline float wrapAngle(float a) {\r\n    cons""}"
EMU_ZPlane_Vault - 1.zip,EMU_ZPlane_Vault/AUTHENTIC/shapes/audity_shapes_A_48k.json,.json,"{""json_keys"": [""sampleRateRef"", ""shapes""], ""type"": ""object""}"
EMU_ZPlane_Vault - 1.zip,EMU_ZPlane_Vault/AUTHENTIC/shapes/audity_shapes_B_48k.json,.json,"{""json_keys"": [""sampleRateRef"", ""shapes""], ""type"": ""object""}"
EMU_ZPlane_Vault - 1.zip,EMU_ZPlane_Vault/AUTHENTIC/spectral/ZPlaneSpectralMask.cpp,.cpp,"{""sample"": ""#include \""ZPlaneSpectralMask.h\""\r\n\r\n#include <cassert>\r\n#include <cmath>\r\n\r\nnamespace zplane {\r\n\r\nstatic constexpr float kRmax = 0.995f; // stability clamp\r\n\r\nvoid ZPlaneSpectralMask::prepare(double sr""}"
EMU_ZPlane_Vault - 1.zip,EMU_ZPlane_Vault/AUTHENTIC/spectral/ZPlaneSpectralMask.h,.h,"{""sample"": ""#pragma once\r\n\r\n#include <vector>\r\n#include <atomic>\r\n#include <complex>\r\n\r\n#include \""ZPlaneCoefficientBank.h\""\r\n#include \""ZPlaneLogFreqLUT.h\""\r\n#include \""ZPlaneUtils.h\""\r\n\r\nnamespace zplane {\r\n\r\n// Qual""}"
EMU_ZPlane_Vault - 1.zip,EMU_ZPlane_Vault/AUTHENTIC/tables/ZPlaneLogFreqLUT.h,.h,"{""sample"": ""#pragma once\r\n\r\n#include <vector>\r\n#include <algorithm>\r\n#include <cmath>\r\n\r\nnamespace zplane {\r\n\r\nstruct LogFreqLUT {\r\n    float sampleRate { 48000.0f };\r\n    float fMin { 20.0f };\r\n    float fMax { ""}"
EMU_ZPlane_Vault - 1.zip,EMU_ZPlane_Vault/AUTHENTIC/tables/ZPlaneTables.h,.h,"{""sample"": ""#pragma once\r\n#include <JuceHeader.h>\r\n#include <cmath>\r\n\r\nclass ZPlaneTables\r\n{\r\npublic:\r\n    // EMU's proprietary T1 table - frequency mapping curve\r\n    // Maps 0.0-1.0 morph parameter to frequency""}"
EMU_ZPlane_Vault - 1.zip,EMU_ZPlane_Vault/AUTHENTIC/tables/ZPlaneTables_T1.h,.h,"{""sample"": ""// Autogenerated by fit_table_to_header.py\r\n// T1->cutoff mapping - authentic EMU Z-plane characteristics\r\n#pragma once\r\n#include <cstddef>\r\nnamespace ZPlaneTables {\r\nstatic constexpr size_t T1_TABLE_""}"
EMU_ZPlane_Vault - 1.zip,EMU_ZPlane_Vault/AUTHENTIC/tables/ZPlaneTables_T2.h,.h,"{""sample"": ""// Autogenerated by fit_table_to_header.py\r\n// T2->resonance mapping - authentic EMU Z-plane Q control\r\n#pragma once\r\n#include <cstddef>\r\nnamespace ZPlaneTables {\r\nstatic constexpr size_t T2_TABLE_LEN""}"
EMU_ZPlane_Vault - 1.zip,EMU_ZPlane_Vault/banks/orbit3/Orbit-3_comprehensive.json,.json,"{""json_keys"": [""meta"", ""presets""], ""type"": ""object""}"
EMU_ZPlane_Vault - 1.zip,EMU_ZPlane_Vault/banks/planet_phatt/Planet_Phatt_comprehensive.json,.json,"{""json_keys"": [""meta"", ""presets""], ""type"": ""object""}"
EMU_ZPlane_Vault - 1.zip,EMU_ZPlane_Vault/banks/proteus/Proteus1_fixed.json,.json,"{""json_keys"": [""meta"", ""presets""], ""type"": ""object""}"
EMU_ZPlane_Vault - 1.zip,EMU_ZPlane_Vault/banks/proteus/ProteusX_Composer.json,.json,"{""json_keys"": [""meta"", ""presets""], ""type"": ""object""}"
EMU_ZPlane_Vault - 1.zip,EMU_ZPlane_Vault/documentation/extraction/EXTRACTION_GUIDE.md,.md,"{""headings"": [""Extraction Guide""], ""bullets"": [""**Filters** → `extracted/dsp/filters/` (e.g., Biquad/IIR/SVF)"", ""**FFT/Spectral** → `extracted/dsp/fft/` & `extracted/synth/spectral/`"", ""**Modulation** → `extracted/dsp/modulation/` (LFO/ADSR)"", ""**Concurrency** → `extracted/utils/concurrency/` (lock-free FIFOs for audio/MIDI exchange)"", ""**Parameters** → `extracted/utils/parameters/`"", ""Add a small standalone app build or use JUCE's UnitTest framework."", ""For audio validation: impulse and sine sweep through your module; null tests against a reference where possible.""]}"
EMU_ZPlane_Vault - 1.zip,EMU_ZPlane_Vault/documentation/extraction/HANDOFF_EMU_INTEGRATION.md,.md,"{""headings"": [""🎯 EMU Bank Browser Integration - Session Handoff\r""], ""bullets"": [""**`BankRegistry`** - Manages imported EMU banks, converts to UI-friendly data\r"", ""**`PresetBrowserComponent`** - JUCE browser with bank/category/preset filtering + mod badges\r"", ""**`EditorIntegrationExample`** - Complete plugin editor integration example\r"", ""**`README.md`** - Comprehensive integration documentation\r"", ""**Enhanced `LFOBundle`** - Added tempo-sync support (`division`, `tempo_sync` fields)\r"", ""**Updated JSON loader** - Handles tempo-sync vs Hz-based LFOs automatically\r"", ""**`EngineApply` API** - Complete callback system for preset→engine mapping\r"", ""Complete EMU bank import/browse/load workflow\r"", ""RT-safe architecture with message thread file I/O\r"", ""Tempo-sync LFO support with host BPM tracking\r""]}"
EMU_ZPlane_Vault - 1.zip,EMU_ZPlane_Vault/documentation/hardware_specs/EMU_AUDITY_2000_TECHNICAL_SPECS.md,.md,"{""headings"": [""EMU Audity 2000 Technical Specifications\r""], ""bullets"": [""**Release Date:** 1998-2000\r"", ""**Type:** Digital sample-based ROMpler (NOT analog synthesizer)\r"", ""**DSP Core:** E-mu G-series and H-series DSP chips (same as Morpheus)\r"", ""**Sample Rate:** 39kHz/16-bit internal, 44.1kHz/18-bit DAC output\r"", ""**Power:** Internal auto-sensing 90-240V supply\r"", ""**Polyphony:** 32 voices (OS 1.0) → 64 voices (OS 2.0)\r"", ""**Voice Allocation:** Dynamic - 6th-order filters use 1 voice, 12th-order use 2 voices\r"", ""**Multitimbrality:** 16 parts, each with independent arpeggiator\r"", ""**Instruments per Preset:** Up to 4 instruments per preset (split/layer capable)\r"", ""**Capacity:** 16MB base ROM + 1 expansion slot (total 32MB possible)\r""]}"
EMU_ZPlane_Vault - 1.zip,EMU_ZPlane_Vault/documentation/implementation/ARCHITECTURE_OVERVIEW.md,.md,"{""headings"": [""Architecture Overview""], ""bullets"": [""**Audio Thread**: `processBlock` operates at high priority; keep it lock-free and allocation-free."", ""**Message Thread**: UI components, parameter controls, preset loading; communicate via APVTS or lock-free queues."", ""**DSP Blocks**: Prefer small, composable classes (Filter, FFT, Modulation) with `prepare`, `reset`, and `process` methods."", ""**Memory**: Preallocate in `prepareToPlay`; reuse buffers and avoid STL operations that allocate."", ""**Denormals**: Use `juce::ScopedNoDenormals` or set DAZ/FTZ.""]}"
EMU_ZPlane_Vault - 1.zip,EMU_ZPlane_Vault/documentation/implementation/MODULE_MAP.md,.md,"{""headings"": [""Module Map (extracted from Unified_Curation_20250913_102843)""], ""bullets"": [""**dsp/fft** — FFT/STFT helpers, windows, spectral blocks."", ""**dsp/filters** — Biquad/IIR/FIR/SVF and related utils."", ""**dsp/modulation** — LFOs, envelopes, modulation routing helpers."", ""**synth/spectral** — Oscillators, wavetables, spectral synth/resynthesis pieces."", ""**utils/concurrency** — Lock-free queues, ring buffers, RT-safe primitives."", ""**utils/math** — Math helpers, SIMD/approx functions."", ""**gui/components** — JUCE Components, LookAndFeel, editor bits."", ""**utils/parameters** — APVTS/value tree helpers."", ""**misc** — Unclassified but potentially useful bits.""]}"
EMU_ZPlane_Vault - 1.zip,EMU_ZPlane_Vault/documentation/implementation/PORTING_CHECKLIST.md,.md,"{""headings"": [""Porting Checklist""], ""bullets"": [""[ ] Files compile under C++20 with `-Wall -Wextra -Wpedantic`."", ""[ ] No `new`/`delete` or heap allocations in `processBlock`."", ""[ ] No mutex/lock on the audio thread; use lock-free or atomic flags."", ""[ ] Parameter smoothing implemented for audible params."", ""[ ] SIMD paths guarded with scalar fallback."", ""[ ] Handle NaN/Inf inputs gracefully."", ""[ ] Avoid large object copies in the audio loop (use `std::span`/views where possible)."", ""[ ] Unit or golden tests for filters/FFT where feasible.""]}"
EMU_ZPlane_Vault - 1.zip,EMU_ZPlane_Vault/documentation/implementation/Z_PLANE_FILTER_IMPLEMENTATION_SPEC.md,.md,"{""headings"": [""Z-Plane Filter Implementation Specification\r""], ""bullets"": [""**Structure:** 3 biquad sections in series\r"", ""**Poles:** Up to 6 complex poles\r"", ""**CPU Usage:** Optimized for maximum polyphony  \r"", ""**Quality:** High quality for most applications\r"", ""**Structure:** 6 biquad sections in series\r"", ""**Poles:** Up to 12 complex poles\r"", ""**CPU Usage:** Higher processing requirement\r"", ""**Quality:** Exceptional quality for critical applications\r"", ""**Coefficient Caching:** Pre-calculate common morph positions\r"", ""**Ring Buffers:** Efficient delay line management for complex filters\r""]}"
EMU_ZPlane_Vault - 1.zip,EMU_ZPlane_Vault/documentation/research/RESEARCH_SOURCES.md,.md,"{""headings"": [""EMU Audity 2000 Research Sources\r""], ""bullets"": [""Complete technical architecture breakdown\r"", ""Verified specifications from primary sources  \r"", ""Implementation guidance and patent references\r"", ""Distinction clarification between 1970s Audity and 1998 Audity 2000\r"", ""Artist usage documentation and market validation\r"", ""Source: ManualsLib - https://www.manualslib.com/manual/3505475/E-Mu-Audity-2000.html\r"", ""Content: Official technical specifications and operating procedures\r"", ""Key Data: Complete parameter listings, preset organization, MIDI implementation\r"", ""Source: https://www.soundonsound.com/reviews/emu-audity-2000\r"", ""Author: Professional music technology journalism\r""]}"
EMU_ZPlane_Vault - 1.zip,EMU_ZPlane_Vault/INDEX.csv,.csv,"{""columns"": [""category"", ""file"", ""source_rel""], ""rows_previewed"": 5}"
EMU_ZPlane_Vault - 1.zip,EMU_ZPlane_Vault/manifest.json,.json,"{""json_keys"": [""version"", ""name"", ""description"", ""source"", ""sampleRates"", ""format"", ""extractionDate"", ""filterOrder"", ""biquadSections"", ""morphingCapable"", ""filters"", ""implementation"", ""banks"", ""documentation"", ""authenticity"", ""usage"", ""metadata""], ""type"": ""object""}"
EMU_ZPlane_Vault - 1.zip,EMU_ZPlane_Vault/README.md,.md,"{""headings"": [""EMU Z-Plane Filter Collection\r""], ""bullets"": [""`AUTHENTIC/shapes/` - Real EMU pole/zero coefficient data\r"", ""Vowel formants (Ae → Oo morphing)\r"", ""Metallic resonances (Bell → Cluster morphing)\r"", ""Low formant processing (Punch → Pad morphing)\r"", ""`AUTHENTIC/core/` - Production-ready C++ Z-plane processor\r"", ""`AUTHENTIC/tables/` - Lookup tables for parameter mapping\r"", ""Real-time morphing with 12th-order cascaded biquads\r"", ""`banks/` - Complete preset data from EMU hardware\r"", ""Modulation routing, LFO settings, envelope parameters\r"", ""JSON format ready for modern use\r""]}"
Source - 2.zip,Source/assets/button/button_24px.png,.png,binary asset (skipped)
Source - 2.zip,Source/assets/button/button_32px.png,.png,binary asset (skipped)
Source - 2.zip,Source/assets/button/button_40px.png,.png,binary asset (skipped)
Source - 2.zip,Source/assets/knob/knob_32px.png,.png,binary asset (skipped)
Source - 2.zip,Source/assets/knob/knob_48px.png,.png,binary asset (skipped)
Source - 2.zip,Source/assets/knob/knob_64px.png,.png,binary asset (skipped)
Source - 2.zip,Source/assets/lcd/lcd_segment_16px.png,.png,binary asset (skipped)
Source - 2.zip,Source/assets/lcd/lcd_segment_20px.png,.png,binary asset (skipped)
Source - 2.zip,Source/assets/lcd/lcd_segment_24px.png,.png,binary asset (skipped)
Source - 2.zip,Source/assets/lcd/led_green_16px.png,.png,binary asset (skipped)
Source - 2.zip,Source/assets/lcd/led_green_20px.png,.png,binary asset (skipped)
Source - 2.zip,Source/assets/lcd/led_green_24px.png,.png,binary asset (skipped)
Source - 2.zip,Source/assets/led/led_green_12px.png,.png,binary asset (skipped)
Source - 2.zip,Source/assets/led/led_green_16px.png,.png,binary asset (skipped)
Source - 2.zip,Source/assets/led/led_green_20px.png,.png,binary asset (skipped)
Source - 2.zip,Source/assets/led/led_red_12px.png,.png,binary asset (skipped)
Source - 2.zip,Source/assets/led/led_red_16px.png,.png,binary asset (skipped)
Source - 2.zip,Source/assets/led/led_red_20px.png,.png,binary asset (skipped)
Source - 2.zip,Source/assets/manifest.json,.json,"{""json_keys"": [""version"", ""description"", ""frames"", ""panels"", ""sprites"", ""layout_constants"", ""color_palette""], ""type"": ""object""}"
Source - 2.zip,Source/assets/meter/meter_segment_16px.png,.png,binary asset (skipped)
Source - 2.zip,Source/assets/meter/meter_segment_20px.png,.png,binary asset (skipped)
Source - 2.zip,Source/assets/meter/meter_segment_24px.png,.png,binary asset (skipped)
Source - 2.zip,Source/assets/panels/nameplate_aluminum_128px.png,.png,binary asset (skipped)
Source - 2.zip,Source/assets/panels/nameplate_aluminum_32px.png,.png,binary asset (skipped)
Source - 2.zip,Source/assets/panels/nameplate_aluminum_64px.png,.png,binary asset (skipped)
Source - 2.zip,Source/assets/panels/panel_graphite_128px.png,.png,binary asset (skipped)
Source - 2.zip,Source/assets/panels/panel_graphite_256px.png,.png,binary asset (skipped)
Source - 2.zip,Source/assets/panels/panel_graphite_64px.png,.png,binary asset (skipped)
Source - 2.zip,Source/assets/panels/panel_teal_128px.png,.png,binary asset (skipped)
Source - 2.zip,Source/assets/panels/panel_teal_256px.png,.png,binary asset (skipped)
Source - 2.zip,Source/assets/panels/panel_teal_64px.png,.png,binary asset (skipped)
Source - 2.zip,Source/assets/sprite_index.txt,.txt,"{""headings"": [], ""bullets"": []}"
Source - 2.zip,Source/assets/toggle/toggle_20px.png,.png,binary asset (skipped)
Source - 2.zip,Source/assets/toggle/toggle_24px.png,.png,binary asset (skipped)
Source - 2.zip,Source/assets/toggle/toggle_28px.png,.png,binary asset (skipped)
Source - 2.zip,Source/CanvasPanel.h,.h,"{""sample"": ""#pragma once\r\n\r\n#include <JuceHeader.h>\r\n#include <memory>\r\n\r\nclass CanvasPanel : public juce::Component,\r\n                    public juce::FileDragAndDropTarget\r\n{\r\npublic:\r\n    CanvasPanel();\r\n    ~""}"
Source - 2.zip,Source/ColorToSpectralMapper.h,.h,"{""sample"": ""/******************************************************************************\r\n * File: ColorToSpectralMapper.h\r\n * Description: Revolutionary color-to-spectral parameter mapping system\r\n * \r\n * Tra""}"
Source - 2.zip,Source/CommandLinePanel.cpp,.cpp,"{""sample"": ""/******************************************************************************\r\n * File: CommandLinePanel.cpp\r\n * Description: CDP-style command line processing panel implementation\r\n * \r\n * REVOLUTI""}"
Source - 2.zip,Source/CommandLinePanel.h,.h,"{""sample"": ""/******************************************************************************\r\n * File: CommandLinePanel.h\r\n * Description: CDP-style command line processing panel\r\n * \r\n * REVOLUTIONARY CDP-INSPIRE""}"
Source - 2.zip,Source/CommandQueue.h,.h,"{""sample"": ""#pragma once\r\n#include <JuceHeader.h>\r\n#include \""Commands.h\""\r\n#include <memory>\r\n#include <atomic>\r\n\r\n/**\r\n * Thread-safe, lock-free command queue for real-time audio communication\r\n * \r\n * This imple""}"
Source - 2.zip,Source/Commands.h,.h,"{""sample"": ""#pragma once\r\n// ──────────────────────────────────────────────────────────────────────────────\r\n// JUCE defines a legacy   #define CommandID int\r\n// Undefine it before we declare our own enum:\r\n#ifde""}"
Source - 2.zip,Source/Core/AtlasIds.h,.h,"{""sample"": ""#pragma once\r\n\r\n// Minimal atlas configuration for tests and components that require constants.\r\n// These values match typical FFT settings used across the project.\r\nnamespace AtlasConfig {\r\n\tconstexp""}"
Source - 2.zip,Source/Core/AudioPathId.h,.h,"{""sample"": ""#pragma once\r\n\r\nenum class AudioPathId : uint8_t \r\n{\r\n    Unknown = 0,\r\n    TestFeeder = 1, \r\n    Phase4Synth = 2,\r\n    SpectralResynthesis = 3,\r\n    SpectralEngineStub = 4,\r\n    ModernPaint = 5,\r\n   ""}"
Source - 2.zip,Source/Core/AudioRecorder.cpp,.cpp,"{""sample"": ""#include \""AudioRecorder.h\""\r\n#include <cmath>\r\n#include <algorithm>\r\n\r\n//==============================================================================\r\n// AudioRecorder Implementation\r\n\r\nAudioRecorder""}"
Source - 2.zip,Source/Core/AudioRecorder.h,.h,"{""sample"": ""#pragma once\r\n\r\n#include <JuceHeader.h>\r\n#include <atomic>\r\n#include <memory>\r\n\r\n/**\r\n * AudioRecorder - Real-time audio capture for ARTEFACT\r\n * \r\n * Captures output from PaintEngine and exports to W""}"
Source - 2.zip,Source/Core/BuildInfo.h,.h,"{""sample"": ""#pragma once\n\n// Runtime build verification - this will prove which code is actually running\n#define SC_BUILD_DATETIME __DATE__ \"" \"" __TIME__\n#define SC_BUILD_CONFIG \""MVP_UI_ENABLED\""\n#define SC_BUILD_H""}"
Source - 2.zip,Source/Core/CanvasLayer.cpp,.cpp,"{""sample"": ""/******************************************************************************\r\n * File: CanvasLayer.cpp\r\n * Description: Implementation of multi-layer canvas system\r\n * \r\n * Copyright (c) 2025 Spect""}"
Source - 2.zip,Source/Core/CanvasLayer.h,.h,"{""sample"": ""/******************************************************************************\r\n * File: CanvasLayer.h\r\n * Description: Multi-layer canvas system for professional composition\r\n * \r\n * Enables complex""}"
Source - 2.zip,Source/Core/CanvasProcessor.cpp,.cpp,"{""sample"": ""#include \""CanvasProcessor.h\""\r\n#include <JuceHeader.h>\r\n#include <cmath>\r\n\r\n\r\nCanvasProcessor::CanvasProcessor()\r\n{\r\n    // Pre-allocate the vector to its maximum size to avoid reallocations\r\n    oscil""}"
Source - 2.zip,Source/Core/CanvasProcessor.h,.h,"{""sample"": ""    #pragma once\r\n    #include <JuceHeader.h>\r\n\r\n    class CanvasProcessor\r\n    {\r\n    public:\r\n        CanvasProcessor();\r\n        ~CanvasProcessor();\r\n\r\n        void prepareToPlay(double sampleRate,""}"
Source - 2.zip,Source/Core/CDPSpectralEngine.cpp,.cpp,"{""sample"": ""/******************************************************************************\n * File: CDPSpectralEngine.cpp\n * Description: Implementation of CDP-style spectral processing engine\n * \n * Revolutiona""}"
Source - 2.zip,Source/Core/CDPSpectralEngine.h,.h,"{""sample"": ""/******************************************************************************\r\n * File: CDPSpectralEngine.h\r\n * Description: CDP-style spectral processing engine for real-time paint control\r\n * \r\n *""}"
Source - 2.zip,Source/Core/CEM3389Filter.h,.h,"{""sample"": ""/******************************************************************************\r\n * File: CEM3389Filter.h\r\n * Description: Secret E-mu Audity CEM3389 filter emulation (INVISIBLE TO USER)\r\n * \r\n * This""}"
Source - 2.zip,Source/Core/CollaborativeManager.cpp,.cpp,"{""sample"": ""#ifndef SC_EXPERIMENTAL_CLOUD\r\n#define SC_EXPERIMENTAL_CLOUD 0\r\n#endif\r\n\r\n#if SC_EXPERIMENTAL_CLOUD\r\n#include \""CollaborativeManager.h\""\r\n#include <juce_core/juce_core.h>\r\n#include <juce_data_structures""}"
Source - 2.zip,Source/Core/CollaborativeManager.h,.h,"{""sample"": ""#pragma once\r\n#include <JuceHeader.h>\r\n#include <memory>\r\n#include <atomic>\r\n#include <vector>\r\n#include <unordered_map>\r\n\r\n/**\r\n * Collaborative Manager - Real-Time Music Creation Revolution\r\n * \r\n *""}"
Source - 2.zip,Source/Core/ColorToSpectralMapper.cpp,.cpp,"{""sample"": ""#include \""ColorToSpectralMapper.h\""\r\n#include <algorithm>\r\n#include <cmath>\r\n\r\nColorToSpectralMapper::ColorAnalysis::ColorAnalysis(juce::Colour color)\r\n    : originalColor(color)\r\n{\r\n    hue = color.ge""}"
Source - 2.zip,Source/Core/ColorToSpectralMapper.h,.h,"{""sample"": ""#pragma once\r\n#include <juce_core/juce_core.h>\r\n#include <juce_graphics/juce_graphics.h>\r\n#include <vector>\r\n#include <unordered_map>\r\n#include <memory>\r\n\r\n/**\r\n * Color-to-spectral parameter mapping ""}"
Source - 2.zip,Source/Core/ColumnOps.h,.h,"{""sample"": ""#pragma once\r\n#include \""AtlasIds.h\""\r\n#include <cstring>\r\n#include <type_traits>\r\n\r\nnamespace atlas\r\n{\r\n    // Canonical sizes for a single spectral column\r\n    constexpr size_t kColumnElems = static_c""}"
Source - 2.zip,Source/Core/CommandQueueOptimized.h,.h,"{""sample"": ""#pragma once\r\n#include <JuceHeader.h>\r\n#include \""OptimizedCommands.h\""\r\n#include <memory>\r\n#include <atomic>\r\n#include <array>\r\n\r\n/**\r\n * PRODUCTION-READY Thread-safe, lock-free command queue for real-""}"
Source - 2.zip,Source/Core/Commands.h,.h,"{""sample"": ""#pragma once\n// ──────────────────────────────────────────────────────────────────────────────\n// JUCE defines a legacy   #define CommandID int\n// Undefine it before we declare our own enum:\n#ifdef Co""}"
Source - 2.zip,Source/Core/Config.cpp,.cpp,"{""sample"": ""#include \""Config.h\"" // Hook test\r\n#include <string>\r\n#include <cstring>\r\n\r\nnamespace SpectralCanvas {\r\nnamespace Config {\r\n    std::atomic<LaunchMode> g_LaunchMode{LaunchMode::Normal};  // Default to ""}"
Source - 2.zip,Source/Core/Config.h,.h,"{""sample"": ""#pragma once\r\n\r\n#include <cstdlib>\r\n#include <atomic>\r\n#include <string>\r\n\r\nnamespace SpectralCanvas {\r\nnamespace Config {\r\n\r\n    // Launch mode detection (minimal for baseline)\r\n    enum class Launch""}"
Source - 2.zip,Source/Core/ContinuousVerification.h,.h,"{""sample"": ""#pragma once\r\n\r\n#include <juce_audio_processors/juce_audio_processors.h>\r\n#include <atomic>\r\n#include <array>\r\n#include <chrono>\r\n#include <memory>\r\n#include <string>\r\n\r\n/**\r\n * ContinuousVerification""}"
Source - 2.zip,Source/Core/CrashToggles.h,.h,"{""sample"": ""#pragma once\n\n// CLAUDE.md Core Practice 1: CrashToggles First\n// All stability switches live here. Default = safest setting until explicitly cleared.\n\nnamespace CrashToggles {\n    \n    // Paint-to-Au""}"
Source - 2.zip,Source/Core/DegradedModeManager.h,.h,"{""sample"": ""/******************************************************************************\r\n * File: DegradedModeManager.h\r\n * Description: Degraded mode management for graceful component failure handling\r\n * \r\n""}"
Source - 2.zip,Source/Core/DiagnosticLogger.cpp,.cpp,"{""sample"": ""#include \""DiagnosticLogger.h\""\r\n#include \""PlatformTimeUtils.h\""\r\n#include <chrono>\r\n#include <iomanip>\r\n\r\nnamespace DiagnosticLogger\r\n{\r\n    void logMessage(Category category, Level level, const char* f""}"
Source - 2.zip,Source/Core/DiagnosticLogger.h,.h,"{""sample"": ""#pragma once\r\n\r\n#include <juce_core/juce_core.h>\r\n#include <string>\r\n#include <sstream>\r\n\r\n/**\r\n * @file DiagnosticLogger.h\r\n * @brief Structured logging system for sample loading diagnostics\r\n * \r\n *""}"
Source - 2.zip,Source/Core/DoubleBuffer.h,.h,"{""sample"": ""#pragma once\r\n#include <atomic>\r\n#include <vector>\r\n#include <cstddef>\r\n#include <cstring>\r\n\r\n// RT-safe double buffer for GUI→audio mask transfer\r\nstruct FloatMaskDB {\r\n  std::vector<float> buf[2];\r\n""}"
Source - 2.zip,Source/Core/EMUFilter.h.backup,.backup,kept (non-text)
Source - 2.zip,Source/Core/ForgeProcessor.cpp,.cpp,"{""sample"": ""﻿#include \""Core/ForgeProcessor.h\""\r\n#include \""Core/SpectralMask.h\""\r\n\r\n//==============================================================================\r\nForgeProcessor::ForgeProcessor()\r\n{\r\n    formatMa""}"
Source - 2.zip,Source/Core/ForgeProcessor.h,.h,"{""sample"": ""﻿#pragma once\r\n#include <JuceHeader.h>\r\n#include <array>\r\n#include \""ForgeVoice.h\""\r\n#include \""Core/Commands.h\""\r\n\r\n//==============================================================================\r\n// Ma""}"
Source - 2.zip,Source/Core/ForgeVoice.cpp,.cpp,"{""sample"": ""// Core/ForgeVoice.cpp\r\n#include \""ForgeVoice.h\""\r\n#include \""SpectralMask.h\""\r\n\r\nvoid ForgeVoice::prepare(double sr, int blockSize)\r\n{\r\n    sampleRate = sr;\r\n    processBuffer.setSize(2, blockSize);\r\n\r\n ""}"
Source - 2.zip,Source/Core/ForgeVoice.h,.h,"{""sample"": ""#pragma once\r\n\r\n#include <juce_core/juce_core.h>\r\n#include <juce_audio_basics/juce_audio_basics.h>\r\n#include <juce_audio_formats/juce_audio_formats.h>\r\n#include <juce_audio_processors/juce_audio_proce""}"
Source - 2.zip,Source/Core/FrequencyLUT.h,.h,"{""sample"": ""#pragma once\n// FrequencyLUT.h\n// RT-safe MIDI-to-frequency lookup table optimization for SpectralCanvas Pro\n// Precomputes expensive log2/pow operations to avoid per-partial calculations\n// Header-on""}"
Source - 2.zip,Source/Core/GestureSnapshot.h,.h,"{""sample"": ""#pragma once\n\n#define _USE_MATH_DEFINES\n#include <algorithm>\n#include <cmath>\n#include <atomic>\n\n/**\n * @file GestureSnapshot.h\n * @brief RT-safe POD gesture data structure with parameter mappings\n * ""}"
Source - 2.zip,Source/Core/GPUStatus.h,.h,"{""sample"": ""#pragma once\r\n\r\n// Forwarding header to keep tests and includes stable.\r\n// The implementation lives with GPU code per repo guidelines.\r\n\r\n#include \""../../ResearchVault/GPU_Acceleration/GPUStatus.h\""\r\n""}"
Source - 2.zip,Source/Core/GrainPool.cpp,.cpp,"{""sample"": ""/*\r\n  ==============================================================================\r\n\r\n    GrainPool.cpp\r\n    Created: 31 Jul 2025 2:12:44pm\r\n    Author:  hooki\r\n\r\n  =================================""}"
Source - 2.zip,Source/Core/GrainPool.h,.h,"{""sample"": ""/*\r\n  ==============================================================================\r\n\r\n    GrainPool.h\r\n    Created: 31 Jul 2025 2:12:44pm\r\n    Author:  hooki\r\n\r\n  ===================================""}"
Source - 2.zip,Source/Core/HardwareControllerManager.cpp,.cpp,"{""sample"": ""#include \""HardwareControllerManager.h\""\r\n#include <cmath>\r\n\r\n//==============================================================================\r\nHardwareControllerManager::HardwareControllerManager()\r\n{\r""}"
Source - 2.zip,Source/Core/HardwareControllerManager.h,.h,"{""sample"": ""#pragma once\r\n#include <JuceHeader.h>\r\n#include <memory>\r\n#include <atomic>\r\n#include <vector>\r\n#include <unordered_map>\r\n\r\n/**\r\n * Hardware Controller Manager - Revolutionary Tactile Interface System""}"
Source - 2.zip,Source/Core/HarmonicQuantizer.h,.h,"{""sample"": ""// HarmonicQuantizer.h\n// Header-only, RT-safe helpers for harmonic quantization / snap weighting.\n// Implements computeSnapWeight(freq) and pressure->sigma mapping.\n// No allocations, no locks. Suita""}"
Source - 2.zip,Source/Core/IntegrationTest.cpp,.cpp,"{""sample"": ""#include \""PluginProcessor.h\""\r\n#include \""PaintEngine.h\""\r\n#include \""Commands.h\""\r\n#include <JuceHeader.h>\r\n\r\n/**\r\n * Integration test for PaintEngine + PluginProcessor\r\n * Validates that the complete com""}"
Source - 2.zip,Source/Core/LatencyTracker.h,.h,"{""sample"": ""#pragma once\r\n\r\n#include <array>\r\n#include <atomic>\r\n#include <algorithm>\r\n#include <cstdint>\r\n\r\n/**\r\n * RT-safe latency measurement and statistics collection\r\n * Used to track paint→audio latency for""}"
Source - 2.zip,Source/Core/LinearTrackerEngine.cpp,.cpp,"{""sample"": ""#include \""LinearTrackerEngine.h\""\r\n#include <cmath>\r\n#include <algorithm>\r\n\r\n//==============================================================================\r\nLinearTrackerEngine::LinearTrackerEngine()""}"
Source - 2.zip,Source/Core/LinearTrackerEngine.h,.h,"{""sample"": ""#pragma once\r\n#include <JuceHeader.h>\r\n#include <memory>\r\n#include <atomic>\r\n#include <array>\r\n#include <vector>\r\n\r\n/**\r\n * Linear Tracker Engine - Revolutionary New Sequencing Concept\r\n * \r\n * Combin""}"
Source - 2.zip,Source/Core/MaskAtlas.h,.h,"{""sample"": ""#pragma once\r\n#include <atomic>\r\n#include <memory>\r\n#include \""AtlasIds.h\""\r\n#include \""ColumnOps.h\""\r\n\r\nclass MaskAtlas\r\n{\r\npublic:\r\n    static constexpr int kW = AtlasConfig::TILE_WIDTH;\r\n    static con""}"
Source - 2.zip,Source/Core/MaskColumn.h,.h,"{""sample"": ""#pragma once\r\n#include <cstdint>\r\n#include <type_traits>\r\n#include \""AtlasIds.h\""\r\n\r\n/**\r\n * POD used for UI→Audio mask updates; keep trivially copyable.\r\n * Compatible with lock-free queues for RT-safe""}"
Source - 2.zip,Source/Core/MaskSnapshot.cpp,.cpp,"{""sample"": ""#include \""MaskSnapshot.h\""\n\nMaskSnapshot::MaskSnapshot()\n{\n    // Allocate buffers on construction (not in RT thread)\n    workBuffer = std::make_unique<MaskData>();\n    pendingBuffer = std::make_unique""}"
Source - 2.zip,Source/Core/MaskSnapshot.h,.h,"{""sample"": ""#pragma once\r\n\r\n#include <JuceHeader.h>\r\n#include <atomic>\r\n#include <memory>\r\n\r\n/**\r\n * MaskSnapshot - RT-safe mask data transfer system\r\n *\r\n * Implements atomic pointer swapping for lock-free commu""}"
Source - 2.zip,Source/Core/MaskSnapshotDemo.md,.md,"{""headings"": [""MaskSnapshot Demo - RT-Safe Spectral Masking\r""], ""bullets"": [""**maskStrength**: 1.0 (100% effective)\r"", ""**threshold**: -30.0 dB (erase signals >= -30dB)\r"", ""**featherTime**: 10ms (smooth temporal transitions)\r"", ""**protectHarmonics**: true (preserve harmonic content)\r"", ""**Result**: Painted frequencies are attenuated >= 30dB\r"", ""**RT-Safety**: Zero allocations in processBlock()\r"", ""**No Artifacts**: Smooth feathering prevents clicks/pops\r"", ""**Performance**: <2% CPU overhead for mask sampling\r"", ""**Zero allocations** in processBlock()\r"", ""**Bilinear interpolation** for smooth mask sampling  \r""]}"
Source - 2.zip,Source/Core/MessageBus.h,.h,"{""sample"": ""#pragma once\r\n#include \""SpscRingBuffer.h\""\r\n#include \""SampleMessage.h\""\r\n#include \""MaskColumn.h\""\r\n#include \""ParameterUpdate.h\""\r\n#include \""SpectralFrame.h\""\r\n#include \""AtlasIds.h\""\r\n\r\n// Legacy message que""}"
Source - 2.zip,Source/Core/ModMatrix.cpp,.cpp,"{""sample"": ""/*\r\n  ==============================================================================\r\n\r\n    ModMatrix.cpp\r\n    Created: 31 Jul 2025 2:12:52pm\r\n    Author:  hooki\r\n\r\n  =================================""}"
Source - 2.zip,Source/Core/ModMatrix.h,.h,"{""sample"": ""/*\r\n  ==============================================================================\r\n\r\n    ModMatrix.h\r\n    Created: 31 Jul 2025 2:12:52pm\r\n    Author:  hooki\r\n\r\n  ===================================""}"
Source - 2.zip,Source/Core/MorphFilter.cpp,.cpp,"{""sample"": ""#include \""MorphFilter.h\""\r\n#include <cmath>\r\n\r\nvoid MorphFilter::prepare(double sampleRate, int maxBlockSize)\r\n{\r\n    this->sampleRate = sampleRate;\r\n    \r\n    // Calculate smoothing coefficient for ~5""}"
Source - 2.zip,Source/Core/MorphFilter.h,.h,"{""sample"": ""#pragma once\r\n#include <JuceHeader.h>\r\n#include <array>\r\n\r\n/**\r\n * RT-safe morphing filter with curated responses\r\n * E-mu Audity-inspired multimode filter with smooth morphing\r\n */\r\nclass MorphFilter""}"
Source - 2.zip,Source/Core/ObjectPool.cpp,.cpp,"{""sample"": ""#include \""ObjectPool.h\""\r\n#include \""SpectralMask.h\""\r\n#include \""PaintEngine.h\""\r\n#include <memory>\r\n\r\nnamespace Pools\r\n{\r\n    // Global pool instances\r\n    SpectralFramePool* spectralFramePool = nullptr;""}"
Source - 2.zip,Source/Core/ObjectPool.h,.h,"{""sample"": ""#pragma once\r\n\r\n#include <JuceHeader.h>\r\n#include <vector>\r\n#include <atomic>\r\n#include <memory>\r\n\r\n/**\r\n * Real-time safe object pool for eliminating dynamic memory allocation\r\n * \r\n * This template ""}"
Source - 2.zip,Source/Core/OptimizedCommands.cpp,.cpp,"{""sample"": ""#include \""OptimizedCommands.h\""\r\n\r\n// Global string pool instance\r\nStringPool<64, 128> g_stringPool;""}"
Source - 2.zip,Source/Core/OptimizedCommands.h,.h,"{""sample"": ""#pragma once\r\n#include <JuceHeader.h>\r\n#include <cstdint>\r\n#include <cstring>\r\n\r\n/**\r\n * OPTIMIZED Command structure for real-time audio processing\r\n * \r\n * Key improvements over original Command stru""}"
Source - 2.zip,Source/Core/OptimizedOscillatorPool.h,.h,"{""sample"": ""#pragma once\r\n#include <JuceHeader.h>\r\n#include \""AtomicOscillator.h\""\r\n#include <atomic>\r\n#include <array>\r\n#include <cstring>\r\n\r\n/**\r\n * Lock-free oscillator pool with O(1) allocation and deallocation""}"
Source - 2.zip,Source/Core/PaintEngine.cpp,.cpp,"{""sample"": ""#include \""PaintEngine.h\""\r\n\r\nPaintEngine::PaintEngine() = default;\r\nPaintEngine::~PaintEngine() = default;\r\n\r\nvoid PaintEngine::prepareToPlay(double sr, int samplesPerBlock) \r\n{\r\n    sampleRate = sr;\r\n""}"
Source - 2.zip,Source/Core/PaintEngine.h,.h,"{""sample"": ""#pragma once\n\n#include <JuceHeader.h>\n#include <vector>\n#include <memory>\n#include <atomic>\n#include <unordered_map>\n\n/**\n * Real-time audio painting engine for SoundCanvas\n * Converts brush strokes a""}"
Source - 2.zip,Source/Core/PaintEngineMinimal.h,.h,"{""sample"": ""#pragma once\r\n#include \""PaintEngine.h\""""}"
Source - 2.zip,Source/Core/PaintEngineTest.cpp,.cpp,"{""sample"": ""#include \""PaintEngine.h\""\r\n#include <JuceHeader.h>\r\n\r\n/**\r\n * Simple test to validate PaintEngine functionality\r\n * This should be run during development to ensure basic operations work\r\n */\r\nclass Pai""}"
Source - 2.zip,Source/Core/PaintMapping.h,.h,"{""sample"": ""#pragma once\r\n\r\n#include <algorithm>\r\n#include <cmath>\r\n\r\nnamespace paint {\r\n\r\n// Log-frequency Y→bin with top=high (invert y in mapping).\r\n// f in [80, 8000] Hz mapped into [0 .. fftSize/2].\r\ninline ""}"
Source - 2.zip,Source/Core/PaintQueue.h,.h,"{""sample"": ""#pragma once\r\n\r\n#include <atomic>\r\n#include <cstdint>\r\n#include <juce_core/juce_core.h>\r\n\r\n/**\r\n * Lock-free Single Producer Single Consumer (SPSC) queue for paint events\r\n * \r\n * RT-safe queue for pa""}"
Source - 2.zip,Source/Core/ParameterBridge.h,.h,"{""sample"": ""// Core/ParameterBridge.h\r\n#pragma once\r\n#include <JuceHeader.h>\r\n#include <atomic>\r\n\r\nclass ParameterBridge\r\n{\r\npublic:\r\n    struct SlotParameters\r\n    {\r\n        std::atomic<float> pitch{0.0f};\r\n   ""}"
Source - 2.zip,Source/Core/ParameterSnapshot.h,.h,"{""sample"": ""#pragma once\r\n\r\n#include <juce_dsp/juce_dsp.h>\r\n#include <cstdint>\r\n\r\n/**\r\n * RT-safe parameter snapshot system\r\n * \r\n * This creates a per-block POD snapshot of all parameters to ensure:\r\n * 1. No AP""}"
Source - 2.zip,Source/Core/ParameterUpdate.h,.h,"{""sample"": ""#pragma once\r\n#include <cstdint>\r\n#include <type_traits>\r\n\r\n/**\r\n * POD struct for color→spectral parameter updates.\r\n * Used for RT-safe communication from UI to audio thread.\r\n */\r\nstruct ParameterU""}"
Source - 2.zip,Source/Core/ParamIDs.h,.h,"{""sample"": ""#pragma once\r\nnamespace ParamIDs {\r\ninline constexpr const char* cps = \""cps\"";\r\ninline constexpr const char* gamma = \""gamma\"";\r\ninline constexpr const char* topN = \""topN\"";\r\ninline constexpr const char* ""}"
Source - 2.zip,Source/Core/Params.h,.h,"{""sample"": ""#pragma once\r\n\r\n#include <juce_audio_processors/juce_audio_processors.h>\r\n#include <array>\r\n\r\nnamespace Params\r\n{\r\n// Parameter IDs for the plugin\r\nnamespace ParameterIDs\r\n{\r\n    // Dual-Mode Engine P""}"
Source - 2.zip,Source/Core/PerformanceProfiler.cpp,.cpp,"{""sample"": ""/******************************************************************************\r\n * File: PerformanceProfiler.cpp\r\n * Description: Implementation of performance profiling and monitoring\r\n * \r\n * Copyr""}"
Source - 2.zip,Source/Core/PerformanceProfiler.h,.h,"{""sample"": ""/******************************************************************************\r\n * File: PerformanceProfiler.h\r\n * Description: Performance profiling and monitoring for SpectralCanvas Pro\r\n * \r\n * Tr""}"
Source - 2.zip,Source/Core/Phase4DebugTap.h,.h,"{""sample"": ""#pragma once\r\n#include <atomic>\r\n\r\n// Enable/disable all debug tap code at compile time\r\n#ifndef PHASE4_DEBUG_TAP\r\n#define PHASE4_DEBUG_TAP 1\r\n#endif\r\n\r\nstruct Phase4DebugTap\r\n{\r\n    std::atomic<uint6""}"
Source - 2.zip,Source/Core/PlatformTimeUtils.h,.h,"{""sample"": ""#pragma once\r\n#include <ctime>\r\n\r\n/**\r\n * Platform-specific time utilities to handle deprecated functions.\r\n * Provides safe wrappers for localtime and other platform-specific time functions.\r\n */\r\nna""}"
Source - 2.zip,Source/Core/PluginProcessor.cpp,.cpp,"{""sample"": ""﻿// Source/PluginProcessor.cpp\n#include \""PluginProcessor.h\""\n#include \""GUI/PluginEditor.h\""\n#include \""GUI/PluginEditorMVP.h\""\n#include \""GUI/PluginEditorVector.h\""\n#include \""GUI/PluginEditorY2K.h\""\n\n//=====""}"
Source - 2.zip,Source/Core/PluginProcessor.h,.h,"{""sample"": ""﻿// Source/PluginProcessor.h\n#pragma once\n\n#include <JuceHeader.h>\n#include \""Core/Commands.h\""\n#include \""Core/CommandQueue.h\""\n#include \""Core/ForgeProcessor.h\""\n#include \""Core/PaintEngine.h\""\n#include \""Co""}"
Source - 2.zip,Source/Core/PremiumFeatures.cpp,.cpp,"{""sample"": ""/**\r\n * Premium Feature Gating System Implementation\r\n * Controls access to advanced EMU rompler features\r\n */\r\n\r\n#include \""PremiumFeatures.h\""\r\n#include <algorithm>\r\n\r\n//==============================""}"
Source - 2.zip,Source/Core/PremiumFeatures.h,.h,"{""sample"": ""/**\r\n * Premium Feature Gating System\r\n * Controls access to advanced EMU rompler features and exclusive content\r\n * Implements professional licensing and feature management\r\n */\r\n\r\n#pragma once\r\n#inc""}"
Source - 2.zip,Source/Core/PresetManager.h,.h,"{""sample"": ""// Source/Core/PresetManager.h\r\n// Phase 2: Preset Management with JSON save/load\r\n\r\n#pragma once\r\n\r\n#include <juce_audio_processors/juce_audio_processors.h>\r\n#include <juce_data_structures/juce_data_""}"
Source - 2.zip,Source/Core/ProfessionalMeteringSuite.h,.h,"{""sample"": ""/******************************************************************************\r\n * File: ProfessionalMeteringSuite.h\r\n * Description: Professional audio metering for SpectralCanvas Pro\r\n * \r\n * Provi""}"
Source - 2.zip,Source/Core/PsychoacousticBandsPrecompute.cpp,.cpp,"{""sample"": ""#include \""PsychoacousticBandsPrecompute.h\""\r\n#include <algorithm>\r\n#include <cassert>\r\n#include <cmath>\r\n#include <numeric>\r\n\r\nusing namespace PsychoacousticMasking;\r\n\r\n// Bark scale functions (Zwicker""}"
Source - 2.zip,Source/Core/PsychoacousticBandsPrecompute.h,.h,"{""sample"": ""#pragma once\r\n\r\n#include <span>\r\n#include <cmath>\r\n\r\n/**\r\n * Psychoacoustic Bands Precomputation - Phase 1\r\n * \r\n * Builds frequency-domain matrices and thresholds for psychoacoustic masking.\r\n * Supp""}"
Source - 2.zip,Source/Core/QualityGuardian.cpp,.cpp,"{""sample"": ""#include \""QualityGuardian.h\""\r\n#include <algorithm>\r\n#include <sstream>\r\n#include <iomanip>\r\n\r\nnamespace SpectralCanvasQuality {\r\n\r\n//===================================================================""}"
Source - 2.zip,Source/Core/QualityGuardian.h,.h,"{""sample"": ""#pragma once\r\n#include <JuceHeader.h>\r\n#include <atomic>\r\n#include <vector>\r\n#include <memory>\r\n#include <string>\r\n#include <chrono>\r\n\r\n/**\r\n ╔═════════════════════════════════════════════════════════""}"
Source - 2.zip,Source/Core/QualityMonitor.cpp,.cpp,"{""sample"": ""/******************************************************************************\r\n * File: QualityMonitor.cpp\r\n * Description: Implementation of permanent quality monitoring system\r\n * \r\n * Code Qualit""}"
Source - 2.zip,Source/Core/QualityMonitor.h,.h,"{""sample"": ""/******************************************************************************\r\n * File: QualityMonitor.h\r\n * Description: Permanent quality monitoring and performance tracking system\r\n * \r\n * Code Q""}"
Source - 2.zip,Source/Core/RealtimeMemoryManager.cpp,.cpp,"{""sample"": ""#include \""RealtimeMemoryManager.h\""\r\n\r\n// Implementation for RealtimeMemoryManager\r\n// Most functionality is header-only for performance\r\n\r\n// Initialize global memory system\r\nRealtimeMemorySystem& get""}"
Source - 2.zip,Source/Core/RealtimeMemoryManager.h,.h,"{""sample"": ""﻿#pragma once\r\n#include <atomic>\r\n#include <cstdint>\r\n#include <array>\r\n#include <optional>\r\n#include <type_traits>\r\n\r\n// Trivial view of sample data (UI-owned). Deinterleaved channel pointers.\r\nstruc""}"
Source - 2.zip,Source/Core/RealtimeSafeAssertions.h,.h,"{""sample"": ""#pragma once\r\n#include <JuceHeader.h>\r\n#include <atomic>\r\n\r\n/**\r\n * Real-time safe assertion system for audio processing\r\n * \r\n * CRITICAL: These assertions NEVER block the audio thread\r\n * They log e""}"
Source - 2.zip,Source/Core/RealtimeSafeTypes.h,.h,"{""sample"": ""#pragma once\r\n\r\n#include <array>\r\n#include <atomic>\r\n#include <cmath>\r\n#include <cstring>\r\n\r\n#ifndef M_PI\r\n#define M_PI 3.14159265358979323846\r\n#endif\r\n\r\n// RT-safe assertions for debug builds\r\n#ifnde""}"
Source - 2.zip,Source/Core/ReconfigManager.h,.h,"{""sample"": ""#pragma once\r\n\r\n#include <juce_dsp/juce_dsp.h>\r\n#include <atomic>\r\n#include <memory>\r\n#include <array>\r\n#include \""RealtimeSafeTypes.h\""\r\n#include \""AtlasIds.h\""\r\n\r\n/**\r\n * ReconfigManager - Safe FFT/hop/""}"
Source - 2.zip,Source/Core/RTMetrics.h,.h,"{""sample"": ""#pragma once\n#include <JuceHeader.h>\n#include <atomic>\n#include <array>\n#include <chrono>\n\n/**\n * RT-Safe Performance Metrics Collection for SpectralCanvas Pro v2\n * \n * Lock-free metrics collection f""}"
Source - 2.zip,Source/Core/SafetyChecks.h,.h,"{""sample"": ""#pragma once\r\n/**\r\n * Safety Checks and Validation\r\n * Production-ready error handling following best practices\r\n */\r\n\r\n#include <JuceHeader.h>\r\n#include <atomic>\r\n#include <string>\r\n\r\n/**\r\n * Thread-""}"
Source - 2.zip,Source/Core/SampleLoaderService.cpp,.cpp,"{""sample"": ""#include \""SampleLoaderService.h\""\r\n#include \""DiagnosticLogger.h\""\r\n#include <juce_core/juce_core.h>\r\n#include <chrono>\r\n\r\n//==============================================================================""}"
Source - 2.zip,Source/Core/SampleLoaderService.h,.h,"{""sample"": ""#pragma once\r\n\r\n#include <juce_audio_formats/juce_audio_formats.h>\r\n#include <juce_gui_basics/juce_gui_basics.h>\r\n#include <functional>\r\n#include <memory>\r\n\r\n/**\r\n * @file SampleLoaderService.h\r\n * @b""}"
Source - 2.zip,Source/Core/SampleMaskingEngine.cpp,.cpp,"{""sample"": ""#include \""SampleMaskingEngine.h\""\n#include <cmath>\n#include <limits>\n#include <memory>\n\n//==============================================================================\nSampleMaskingEngine::SampleMaski""}"
Source - 2.zip,Source/Core/SampleMaskingEngine.h,.h,"{""sample"": ""#pragma once\n#include <JuceHeader.h>\n#include <memory>\n#include <atomic>\n#include <vector>\n\n/**\n * Sample Masking Engine - Revolutionary Paint-over-Sample System for Beatmakers\n * \n * ARTEFACT's vinta""}"
Source - 2.zip,Source/Core/SampleMessage.h,.h,"{""sample"": ""#pragma once\r\n#include <cstdint>\r\n#include <type_traits>\r\n\r\n// Trivial, handle-based message (no refcounts in RT).\r\nstruct SampleMessage {\r\n    uint32_t handle = 0;   // 0 = invalid/no-op\r\n    uint64_""}"
Source - 2.zip,Source/Core/SecretSauceEngine.cpp,.cpp,"{""sample"": ""#include \""SecretSauceEngine.h\""\r\n#include <cmath>\r\n\r\n//==============================================================================\r\nSecretSauceEngine::SecretSauceEngine()\r\n{\r\n    // Initialize the s""}"
Source - 2.zip,Source/Core/SecretSauceEngine.h,.h,"{""sample"": ""#pragma once\r\n#include <JuceHeader.h>\r\n#include <memory>\r\n#include <atomic>\r\n#include <vector>\r\n#include <array>\r\n\r\n/**\r\n * Secret Sauce Engine - The Hidden Magic Behind The Sound\r\n * \r\n * This is wha""}"
Source - 2.zip,Source/Core/SessionManager.cpp,.cpp,"{""sample"": ""/******************************************************************************\r\n * File: SessionManager.cpp\r\n * Description: Implementation of professional session management\r\n * \r\n * Copyright (c) 2""}"
Source - 2.zip,Source/Core/SessionManager.h,.h,"{""sample"": ""/******************************************************************************\r\n * File: SessionManager.h\r\n * Description: Professional session management for SpectralCanvas Pro\r\n * \r\n * Provides com""}"
Source - 2.zip,Source/Core/SpatialGridTest.cpp,.cpp,"{""sample"": ""/******************************************************************************\r\n * File: SpatialGridTest.cpp\r\n * Description: Test utility for spatial grid sample triggering\r\n * \r\n * Verifies that th""}"
Source - 2.zip,Source/Core/SpatialSampleGrid.cpp,.cpp,"{""sample"": ""/******************************************************************************\r\n * File: SpatialSampleGrid.cpp\r\n * Description: Implementation of spatial grid optimization for O(1) sample triggering\r""}"
Source - 2.zip,Source/Core/SpatialSampleGrid.h,.h,"{""sample"": ""/******************************************************************************\r\n * File: SpatialSampleGrid.h\r\n * Description: Spatial grid optimization for O(1) sample triggering\r\n * \r\n * Maps paint ""}"
Source - 2.zip,Source/Core/SpectralBrushPresets.cpp,.cpp,"{""sample"": ""/******************************************************************************\r\n * File: SpectralBrushPresets.cpp\r\n * Description: Implementation of professional spectral brush preset system\r\n * \r\n *""}"
Source - 2.zip,Source/Core/SpectralBrushPresets.h,.h,"{""sample"": ""/******************************************************************************\r\n * File: SpectralBrushPresets.h\r\n * Description: Professional spectral brush preset system for SpectralCanvas Pro\r\n * \r""}"
Source - 2.zip,Source/Core/SpectralCanvasProProcessor.cpp,.cpp,"{""sample"": ""#include \""SpectralCanvasProProcessor.h\""\r\n#include \""SpectralCanvasProEditor.h\""\r\n\r\nSpectralCanvasProProcessor::SpectralCanvasProProcessor()\r\n    : AudioProcessor(BusesProperties()\r\n                     ""}"
Source - 2.zip,Source/Core/SpectralCanvasProProcessor.h,.h,"{""sample"": ""#pragma once\r\n#include <JuceHeader.h>\r\n\r\nclass SpectralCanvasProProcessor : public juce::AudioProcessor\r\n{\r\npublic:\r\n    SpectralCanvasProProcessor();\r\n    ~SpectralCanvasProProcessor() override;\r\n\r\n ""}"
Source - 2.zip,Source/Core/SpectralCoreEngine.h,.h,"{""sample"": ""#pragma once\r\n\r\n#include <cstdint>\r\n#include <array>\r\n#include <atomic>\r\n#include <memory>\r\n#include <chrono>\r\n#include \""RealtimeSafeTypes.h\""\r\n#include \""ParameterSnapshot.h\""\r\n#include \""ReconfigManager""}"
Source - 2.zip,Source/Core/SpectralFrame.h,.h,"{""sample"": ""#pragma once\r\n#include <cstdint>\r\n#include <type_traits>\r\n\r\n#ifdef _MSC_VER\r\n#pragma warning(push)\r\n#pragma warning(disable: 4324) // structure was padded due to alignment specifier\r\n#endif\r\n\r\n/**\r\n *""}"
Source - 2.zip,Source/Core/SpectralMask.cpp,.cpp,"{""sample"": ""#include \""SpectralMask.h\""\r\n#include <cmath>\r\n#include <algorithm>\r\n\r\n//==============================================================================\r\nSpectralMask::SpectralMask()\r\n{\r\n    // Initializ""}"
Source - 2.zip,Source/Core/SpectralMask.h,.h,"{""sample"": ""#pragma once\r\n\r\n#include <JuceHeader.h>\r\n#include <vector>\r\n#include <array>\r\n\r\n/**\r\n * SpectralMask - MetaSynth-style spectral masking using drum samples\r\n * \r\n * This class analyzes the spectral con""}"
Source - 2.zip,Source/Core/SpectralPath.cpp,.cpp,"{""sample"": ""// SpectralPath.cpp - Stub implementation\r\n""}"
Source - 2.zip,Source/Core/SpectralPath.h,.h,"{""sample"": ""#pragma once\r\n#include \""../Spectral/STFTEngine.h\""\r\n#include <juce_audio_basics/juce_audio_basics.h>\r\n\r\nnamespace SpectralCanvas {\r\n\r\nclass SpectralPath {\r\npublic:\r\n    void prepare(double sampleRate, ""}"
Source - 2.zip,Source/Core/SpectralProcessor.h,.h,"{""sample"": ""// Core/SpectralProcessor.h\r\n#pragma once\r\n#include <JuceHeader.h>\r\n\r\nclass SpectralProcessor\r\n{\r\npublic:\r\n    SpectralProcessor();\r\n    \r\n    // FFT operations\r\n    void analyzeBuffer(const juce::Aud""}"
Source - 2.zip,Source/Core/SpectralSynthEngine.cpp,.cpp,"{""sample"": ""#include \""SpectralSynthEngine.h\""\n#include \""../dsp/Voice.h\""\n\nusing namespace juce;\n\nSpectralSynthEngine::SpectralSynthEngine() noexcept\n{\n    // Modern JUCE-based initialization - no lookup tables need""}"
Source - 2.zip,Source/Core/SpectralSynthEngine.cpp.comprehensive,.comprehensive,kept (non-text)
Source - 2.zip,Source/Core/SpectralSynthEngine.h,.h,"{""sample"": ""#pragma once\n#include <JuceHeader.h>\n#include \""PaintQueue.h\""\n#include \""HarmonicQuantizer.h\""\n#include \""../dsp/SpscRing.h\""\n#include \""../dsp/VoicePool.h\""\n\nclass SpectralSynthEngine\n{\npublic:\n    static S""}"
Source - 2.zip,Source/Core/SpectralSynthEngine.h.comprehensive,.comprehensive,kept (non-text)
Source - 2.zip,Source/Core/SpectralSynthEngineStub.cpp,.cpp,"{""sample"": ""#include \""SpectralSynthEngineStub.h\""\n\nusing namespace juce;\n\nSpectralSynthEngineStub::SpectralSynthEngineStub()\n{\n    // Initialize all oscillators to inactive state\n    for (auto& osc : oscillators_)""}"
Source - 2.zip,Source/Core/SpectralSynthEngineStub.h,.h,"{""sample"": ""#pragma once\r\n#include <JuceHeader.h>\r\n#include \""PaintQueue.h\""\r\n#include <atomic>\r\n#include <array>\r\n#include <cmath>\r\n\r\n/**\r\n * @brief Simplified RT-safe SpectralSynthEngine stub for Y2K theme implem""}"
Source - 2.zip,Source/Core/SpscRingBuffer.h,.h,"{""sample"": ""#pragma once\r\n#include <atomic>\r\n#include <array>\r\n#include <cstddef>\r\n#include <optional>\r\n#include <type_traits>\r\n\r\n/**\r\n * Lock-free single-producer/single-consumer ring buffer.\r\n * Capacity must b""}"
Source - 2.zip,Source/Core/StereoWidth.cpp,.cpp,"{""sample"": ""#include \""StereoWidth.h\""\r\n\r\nStereoWidth::StereoWidth()\r\n{\r\n    // Initialize with safe default\r\n    widthAmount.store(1.0f, std::memory_order_relaxed);\r\n}\r\n\r\nvoid StereoWidth::prepareToPlay(double sam""}"
Source - 2.zip,Source/Core/StereoWidth.h,.h,"{""sample"": ""#pragma once\r\n#include <JuceHeader.h>\r\n#include <atomic>\r\n\r\n/**\r\n * RT-Safe Stereo Width Processor\r\n * Simple mid/side width control for vintage machine character\r\n * Applied at the very end of the pr""}"
Source - 2.zip,Source/Core/SystemIntegrityTest.h,.h,"{""sample"": ""/******************************************************************************\r\n * File: SystemIntegrityTest.h\r\n * Description: Comprehensive system integrity testing framework\r\n * \r\n * Code Quality ""}"
Source - 2.zip,Source/Core/TapeSpeed.cpp,.cpp,"{""sample"": ""#include \""TapeSpeed.h\""\r\n#include \""Util/Determinism.h\""\r\nTapeSpeed::TapeSpeed()\r\n{\r\n    // Initialize with safe defaults\r\n    speedRatio.store(1.0f, std::memory_order_relaxed);\r\n    wowFlutterAmount.sto""}"
Source - 2.zip,Source/Core/TapeSpeed.h,.h,"{""sample"": ""#pragma once\r\n#include <JuceHeader.h>\r\n#include <atomic>\r\n\r\n/**\r\n * RT-Safe Tape Speed Processor\r\n * Variable-rate resampler for vintage tape machine effects\r\n * Supports fixed speed ratios and wow/fl""}"
Source - 2.zip,Source/Core/ThreadSafePaintEngine.h,.h,"{""sample"": ""#pragma once\r\n#include \""PaintEngine.h\""\r\n#include <atomic>\r\n#include <memory>\r\n\r\n/**\r\n * Thread-safe wrapper for PaintEngine\r\n * \r\n * This class provides thread-safe access to PaintEngine functionality""}"
Source - 2.zip,Source/Core/ThreadSafetyTests.cpp,.cpp,"{""sample"": ""/**\r\n * Thread Safety Test Suite for SpectralCanvas Pro\r\n * \r\n * Comprehensive tests for all critical thread-safe components\r\n * Run with ThreadSanitizer for complete race condition detection\r\n * \r\n *""}"
Source - 2.zip,Source/Core/TiledAtlas.cpp,.cpp,"{""sample"": ""#include \""TiledAtlas.h\""\r\n#include <algorithm>\r\n#include <cstring>\r\n\r\nTiledAtlas::TiledAtlas() noexcept\r\n    : pageUpdateFlag_(false)\r\n    , nextGeneration_(1) // Start at 1, 0 is invalid\r\n    , initia""}"
Source - 2.zip,Source/Core/TiledAtlas.h,.h,"{""sample"": ""#pragma once\r\n#include \""AtlasIds.h\""\r\n#include \""RealtimeSafeTypes.h\""\r\n#include <atomic>\r\n#include <array>\r\n#include <memory>\r\n#include <cstring>\r\n\r\n/**\r\n * Tiled spectral atlas with atomic page flippin""}"
Source - 2.zip,Source/Core/TimeUtils.h,.h,"{""sample"": ""#pragma once\r\n#include <cstdint>\r\n#include <chrono>\r\n\r\n/**\r\n * Cross-platform time utilities for high-precision timing.\r\n * Provides microsecond-precision timestamps for audio/UI latency measurement.\r""}"
Source - 2.zip,Source/Core/TransientDetector.h,.h,"{""sample"": ""// TransientDetector.h\n// RT-safe hybrid transient detection using spectral flux + amplitude threshold\n// No allocations in audio thread, preallocated circular buffers\n#pragma once\n\n#include <array>\n#""}"
Source - 2.zip,Source/Core/TransportMapping.h,.h,"{""sample"": ""#pragma once\r\n\r\n#include <cstdint>\r\n#include <cmath>\r\n\r\nnamespace transport {\r\n\r\n// Convert UI steady_clock nanos to audio samples since epoch.\r\ninline uint64_t samplesSinceEpoch(uint64_t uiSteadyNano""}"
Source - 2.zip,Source/Core/TubeStage.cpp,.cpp,"{""sample"": ""#include \""TubeStage.h\""\r\n#include <cmath>\r\n\r\nvoid TubeStage::prepare(double sampleRate, int maxBlockSize)\r\n{\r\n    this->sampleRate = sampleRate;\r\n    \r\n    // Pre-allocate oversampling buffers (max 4x)""}"
Source - 2.zip,Source/Core/TubeStage.h,.h,"{""sample"": ""#pragma once\r\n#include <JuceHeader.h>\r\n#include <array>\r\n\r\n/**\r\n * RT-safe tube saturation with oversampling\r\n * Cubic soft-clip with bias control and auto-gain compensation\r\n */\r\nclass TubeStage\r\n{\r\n""}"
Source - 2.zip,Source/Core/UndoableActions.h,.h,"{""sample"": ""/******************************************************************************\r\n * File: UndoableActions.h\r\n * Description: Undoable actions for SpectralCanvas Pro using JUCE UndoManager\r\n * \r\n * Pro""}"
Source - 2.zip,Source/Core/VisualFeedbackEngine.cpp,.cpp,"{""sample"": ""#include \""VisualFeedbackEngine.h\""\r\n#include <cmath>\r\n\r\n//==============================================================================\r\nVisualFeedbackEngine::VisualFeedbackEngine()\r\n{\r\n    // Initial""}"
Source - 2.zip,Source/Core/VisualFeedbackEngine.h,.h,"{""sample"": ""#pragma once\r\n#include <JuceHeader.h>\r\n#include <memory>\r\n#include <atomic>\r\n#include <vector>\r\n#include <array>\r\n\r\n/**\r\n * Visual Feedback Engine - The Satisfying Visual Experience\r\n * \r\n * Creates t""}"
Source - 2.zip,Source/docs/about,<none>,kept (non-text)
Source - 2.zip,Source/docs/AI_Mockup_Prompts.md,.md,"{""headings"": [""SPECTRAL CANVAS PRO - AI Mockup Generation Prompts\r""], ""bullets"": [""Primary Background: Dark charcoal (#2B2B2B)\r"", ""Secondary Panels: Medium gray (#404040) \r"", ""Text: White (#FFFFFF)\r"", ""Accent: Blue (#0080FF)\r"", ""Metering: Green (#00FF00), Amber (#FFB000)\r"", ""Canvas: Cyan (#00FFFF)\r"", ""Sans-serif professional fonts\r"", ""Bold weight for labels\r"", ""8-12pt for interface text\r"", ""Technical precision in numbering\r""]}"
Source - 2.zip,Source/docs/BEATMAKER_UI_STRATEGY.md,.md,"{""headings"": [""SoundCanvas Beatmaker UI Strategy\r""], ""bullets"": [""**Drop zone**: Entire browser panel accepts audio file drops\r"", ""**Auto-categorization**: Smart detection (kick, snare, etc.) by filename/analysis\r"", ""**Instant preview**: Hover over sound name plays preview\r"", ""**One-click assignment**: Click browser sound → click track → assigned\r"", ""**Minimum**: 800x500 (basic workflow)\r"", ""**Preferred**: 1000x700 (full workflow)\r"", ""**Maximum**: 1400x900 (detailed editing)\r"", ""**MIDI input**: Trigger tracks via MIDI notes (C1=Kick, D1=Snare, etc.)\r"", ""**MIDI output**: Send pattern as MIDI to DAW for further editing\r"", ""**Sync**: Auto-sync BPM with DAW project\r""]}"
Source - 2.zip,Source/docs/CLAUDE.md,.md,"{""headings"": [], ""bullets"": [""You should use subagents to:\r"", ""create your initial output for this task\r"", ""ask Gemini for its initial output for this task\r"", ""You should then integrate Gemini's answer into your own\r"", ""Look at Gemini's response for anything that you may have missed\r"", ""Tell Gemini the task and context again, but this time ask it to critique your response, passing it your response\r"", ""Integrate Gemini's suggestions into your own response\r""]}"
Source - 2.zip,Source/docs/DEVJOURNAL.md,.md,"{""headings"": [""ARTEFACT Development Log\r""], ""bullets"": [""(Add any open technical or architectural questions you want the AI to answer next time)\r"", ""(Short, bullet list — what you did/implemented)\r"", ""(Key takeaways, discoveries, or surprises from this session)\r"", ""(Issues that remain, or specific things to ask AI/Claude in the next session)\r""]}"
Source - 2.zip,Source/docs/how would it work,<none>,kept (non-text)
Source - 2.zip,Source/docs/INTEGRATION_COMPLETE.md,.md,"{""headings"": [""SoundCanvas PaintEngine Integration - COMPLETE ✅\r""], ""bullets"": [""**2,000+ lines of production C++ code**\r"", ""**Thread-safe real-time audio processing** with sub-10ms latency target\r"", ""**Sparse canvas storage** system for infinite canvas support\r"", ""**1024 oscillator pool** for high-performance synthesis\r"", ""**MetaSynth-inspired mapping**: X=time, Y=frequency(log), pressure=amplitude, color=pan\r"", ""**Comprehensive error handling** and performance monitoring\r"", ""**Dual command system** supporting both ForgeCommandID and PaintCommandID\r"", ""**Thread-safe command queue** with 256-entry FIFO buffer\r"", ""**Type-safe command routing** with automatic dispatch\r"", ""**Extended parameters** for paint operations (x, y, pressure, color)\r""]}"
Source - 2.zip,Source/docs/Metasynth and Composer Desktop Pro features.docx,.docx,kept (non-text)
Source - 2.zip,Source/docs/PaintEngine_README.md,.md,"{""headings"": [""PaintEngine - Real-Time Audio Painting System\r""], ""bullets"": [""**Sub-10ms Latency**: Immediate audio feedback from brush strokes\r"", ""**Infinite Canvas**: Sparse storage system supports unlimited canvas size\r"", ""**MetaSynth Mapping**: X=time, Y=pitch (logarithmic), brightness=amplitude, color=stereo/effects\r"", ""**Performance First**: Optimized for real-time performance with 1000+ simultaneous partials\r"", ""**Sample Rate**: 44.1kHz or 48kHz\r"", ""**Block Size**: 256-512 samples\r"", ""**Max Oscillators**: 1024 (configurable)\r"", ""**Canvas Regions**: 64x64 pixels each\r"", ""**Memory Usage**: ~50MB for full oscillator pool\r"", ""**Audio Thread**: `processBlock()` only\r""]}"
Source - 2.zip,Source/docs/plan.md,.md,"{""headings"": [""SpectralCanvas Development Plan & Status\r"", ""🎯 FINAL RECOMMENDATIONS: SoundCanvas Rebranding & GUI Pivot\r"", ""🚀 IMPLEMENTATION STATUS (December 2024)\r""], ""bullets"": [""Project name: SpectralCanvas (finalized)\r"", ""Architecture: JUCE C++ VST3 plugin + standalone app\r"", ""GUI: Modern vibrant colors, functional 800x600 layout  \r"", ""Core paint-to-audio pipeline: **Optimized for sub-10ms latency**\r"", ""[x] Complete file/folder mapping\r"", ""[x] Documentation review (README, MANIFESTO, ROADMAP, etc.)\r"", ""[x] Build system analysis (CMakeLists.txt)\r"", ""[x] Source code organization\r"", ""C++ project (92.3%) using JUCE framework\r"", ""Comprehensive documentation structure (ROADMAP, WORKFLOW, STATUS, etc.)\r""]}"
Source - 2.zip,Source/docs/read this,<none>,kept (non-text)
Source - 2.zip,Source/docs/README.md,.md,"{""headings"": [], ""bullets"": []}"
Source - 2.zip,Source/docs/ROADMAP.md,.md,"{""headings"": [""PROJECT ARTEFACT — Complete Development Roadmap\r""], ""bullets"": []}"
Source - 2.zip,Source/docs/SORA_UI_PROMPT.md,.md,"{""headings"": [""SoundCanvas UI - Sora Image Generation Prompt\r""], ""bullets"": [""Cool Edit Pro aesthetic\r"", ""Early 2000s software\r"", ""Digital audio workstation\r"", ""Dark gray interface\r"", ""Orange accent colors\r"", ""Green playhead\r"", ""Flat buttons\r"", ""Grid-based sequencer\r"", ""Monospace typography\r"", ""Vintage software UI\r""]}"
Source - 2.zip,Source/docs/status.md,.md,"{""headings"": [""SpectralCanvas VST Development Status\r""], ""bullets"": [""**Purpose**: Primary image-to-sound synthesis with integrated filters and effects\r"", ""**MetaSynth Mapping**: X=Time, Y=Frequency, Color=Pan (Red=Left, Green=Right), Brightness=Amplitude\r"", ""**Features**: Core synthesis + basic filters + essential effects all in one interface\r"", ""**Status**: Architecture completed, implementation pending\r"", ""**Purpose**: Simplified spectral manipulation and visualization\r"", ""**Features**: Real-time spectral analysis and editing tools\r"", ""**Status**: Architecture completed, implementation pending\r"", ""**Purpose**: 2-3 core spectral processing effects (freeze, smear, stretch)\r"", ""**Features**: Essential CDP-inspired spectral transformations\r"", ""**Status**: Architecture completed, implementation pending\r""]}"
Source - 2.zip,Source/docs/Summary.txt,.txt,"{""headings"": [], ""bullets"": []}"
Source - 2.zip,Source/docs/UI_DESIGN_PROMPT.md,.md,"{""headings"": [""SoundCanvas Beatmaker UI - Image Generation Prompt\r""], ""bullets"": [""**Window size**: 1000px wide x 700px tall\r"", ""**Color scheme**: Dark theme with orange accents\r"", ""**Background**: Dark gray (#2a2a2a)\r"", ""**Typography**: Monospace font (Courier New style)\r"", ""**Grid lines**: Subtle gray (#444444)\r"", ""**Active elements**: Bright orange (#ff6b35)\r"", ""**Playhead**: Bright green (#00ff41)\r"", ""Play button (triangle), Stop button (square), Record button (circle)\r"", ""BPM display showing \""140\"" in a digital LCD style\r"", ""Pattern name field showing \""Untitled_01\""\r""]}"
Source - 2.zip,Source/docs/Visual_Interface_Mockup.md,.md,"{""headings"": [""SPECTRAL CANVAS PRO - Visual Interface Mockup\r""], ""bullets"": [""**Space** = Play/Pause (shown as small label on button)\r"", ""**S** = Stop\r"", ""**R** = Record\r"", ""**L** = Load Sample\r"", ""**C** = Clear Sample\r"", ""**Status Bar** = Real-time status messages\r"", ""**Error Panel** = LED indicators for system state\r"", ""**Modal Dialogs** = Professional error dialogs for critical issues\r""]}"
Source - 2.zip,Source/docs/WORKFLOW.md,.md,"{""headings"": [""ARTEFACT — Personal Development Workflow\r""], ""bullets"": []}"
Source - 2.zip,Source/docs/~$tasynth and Composer Desktop Pro features.docx,.docx,kept (non-text)
Source - 2.zip,Source/docs/● COMPREHENSIVE CODE REVIEW ARTEFAC.txt,.txt,"{""headings"": [], ""bullets"": [""jassert statements in real-time context can halt audio processing\r"", ""Oscillator pool mutex creates potential starvation scenarios\r"", ""No synchronization on oscillator parameter modifications\r"", ""juce::String in Command structure triggers dynamic allocation\r"", ""Large command structure (>64 bytes) copying overhead\r"", ""No memory pooling for frequently allocated objects\r"", ""Enhanced quantization with triplets and dotted notes\r"", ""Professional tempo sync capabilities\r"", ""Spectral analysis integration\r"", ""Audio file parsing needs bounds checking\r""]}"
Source - 2.zip,Source/DSP/TubeStage.h,.h,"{""sample"": ""#pragma once\r\n\r\n#include <cmath>\r\n\r\nclass TubeStage {\r\npublic:\r\n\tvoid prepare(double /*sampleRate*/) noexcept {}\r\n\tvoid reset() noexcept {}\r\n\r\n\tinline float processSample(float x, float drive01) noexc""}"
Source - 2.zip,Source/DSP/ZPlane/ZPlaneCoefficientBank.cpp,.cpp,"{""sample"": ""#include \""ZPlaneCoefficientBank.h\""\r\n#include <cassert>\r\n\r\nnamespace zplane {\r\n\r\nZPlaneCoefficientBank::ZPlaneCoefficientBank() {\r\n    // Placeholder clean-room examples so wiring compiles; replace wit""}"
Source - 2.zip,Source/DSP/ZPlane/ZPlaneCoefficientBank.h,.h,"{""sample"": ""#pragma once\r\n\r\n#include <array>\r\n#include <cstdint>\r\n\r\nnamespace zplane {\r\n\r\n// Maximum number of biquad sections per model\r\nconstexpr int kMaxSections = 6; // up to 12 poles in conjugate pairs\r\n\r\n//""}"
Source - 2.zip,Source/DSP/ZPlane/ZPlaneLogFreqLUT.h,.h,"{""sample"": ""#pragma once\r\n\r\n#include <vector>\r\n#include <algorithm>\r\n#include <cmath>\r\n\r\nnamespace zplane {\r\n\r\nstruct LogFreqLUT {\r\n    float sampleRate { 48000.0f };\r\n    float fMin { 20.0f };\r\n    float fMax { ""}"
Source - 2.zip,Source/DSP/ZPlane/ZPlaneSpectralMask.cpp,.cpp,"{""sample"": ""#include \""ZPlaneSpectralMask.h\""\r\n\r\n#include <cassert>\r\n#include <cmath>\r\n\r\nnamespace zplane {\r\n\r\nstatic constexpr float kRmax = 0.995f; // stability clamp\r\n\r\nvoid ZPlaneSpectralMask::prepare(double sr""}"
Source - 2.zip,Source/DSP/ZPlane/ZPlaneSpectralMask.h,.h,"{""sample"": ""#pragma once\r\n\r\n#include <vector>\r\n#include <atomic>\r\n#include <complex>\r\n\r\n#include \""ZPlaneCoefficientBank.h\""\r\n#include \""ZPlaneLogFreqLUT.h\""\r\n#include \""ZPlaneUtils.h\""\r\n\r\nnamespace zplane {\r\n\r\n// Qual""}"
Source - 2.zip,Source/DSP/ZPlane/ZPlaneUtils.h,.h,"{""sample"": ""#pragma once\r\n\r\n#include <cmath>\r\n#if defined(__SSE__) || defined(__SSE2__)\r\n  #include <xmmintrin.h>\r\n#endif\r\n#include <algorithm>\r\n\r\nnamespace zplane {\r\n\r\ninline float wrapAngle(float a) {\r\n    cons""}"
Source - 2.zip,Source/gpu/DeviceResilience.h,.h,"{""sample"": ""#pragma once\r\n\r\n#include <atomic>\r\n#include <cstdint>\r\n#include \""../Core/GPUStatus.h\""\r\n\r\n// Minimal device-lost handling scaffolding for tests.\r\n\r\nclass DeviceRecoveryTimer {\r\npublic:\r\n    DeviceRecov""}"
Source - 2.zip,Source/GUI/components/MeterView.cpp,.cpp,"{""sample"": ""#include \""MeterView.h\""\r\n\r\nusing juce::Rectangle;\r\nusing juce::Colour;\r\n\r\nvoid MeterView::timerCallback()\r\n{\r\n\tif (!source_) return;\r\n\tconst int n = source_->getNumSamples();\r\n\tconst int ch = source_->""}"
Source - 2.zip,Source/GUI/components/MeterView.h,.h,"{""sample"": ""#pragma once\r\n\r\n#include <JuceHeader.h>\r\n\r\nclass MeterView : public juce::Component, private juce::Timer {\r\npublic:\r\n\tvoid setSource(juce::AudioBuffer<float>* buffer) { source_ = buffer; }\r\n\tvoid pain""}"
Source - 2.zip,Source/GUI/MinimalTopStrip.h,.h,"{""sample"": ""#pragma once\r\n\r\n#include <juce_gui_basics/juce_gui_basics.h>\r\n#include <juce_audio_processors/juce_audio_processors.h>\r\n#include \""Core/Params.h\""\r\n\r\nclass MinimalTopStrip : public juce::Component\r\n{\r\np""}"
Source - 2.zip,Source/Main.cpp,.cpp,"{""sample"": ""#include <JuceHeader.h>\r\n#include \""SpectralCanvasApp.h\""\r\n\r\nSTART_JUCE_APPLICATION(SpectralCanvasApp)\r\n""}"
Source - 2.zip,Source/MainEMU.cpp,.cpp,"{""sample"": ""/**\r\n * SpectralCanvas EMU Rompler Main Application\r\n * Launches the EMU Rompler version with AI-generated visuals support\r\n * Built on the proven clean foundation\r\n */\r\n\r\n#include <JuceHeader.h>\r\n#in""}"
Source - 2.zip,Source/Main_Minimal.cpp,.cpp,"{""sample"": ""/*\r\n * Minimal Main - Foundation Test App\r\n * Clean JUCE application without ChatGPT bloat\r\n */\r\n\r\n#include <JuceHeader.h>\r\n#include \""MainComponent_Minimal.h\""\r\n\r\nclass SpectralCanvasProMinimalApp : pu""}"
Source - 2.zip,Source/OfflineRender.cpp,.cpp,"{""sample"": ""/**\n * OfflineRender.cpp\n * \n * Standalone console application to generate demo audio files\n * showing SpectralCanvas Pro's paint-to-audio transformation.\n * \n * Generates:\n * - before_magic.wav: Clea""}"
Source - 2.zip,Source/PaintControlPanel.h,.h,"{""sample"": ""#pragma once\r\n\r\n#include <JuceHeader.h>\r\n#include \""Core/Commands.h\""\r\n#include \""../CanvasComponent.h\""\r\n\r\n// Forward declarations\r\nclass ARTEFACTAudioProcessor;\r\n\r\n/**\r\n * PaintControlPanel - Modern vib""}"
Source - 2.zip,Source/PaintEngine.h,.h,"{""sample"": ""#pragma once\r\n\r\n#include <JuceHeader.h>\r\n#include <vector>\r\n#include <memory>\r\n#include <atomic>\r\n#include <unordered_map>\r\n\r\n/**\r\n * Real-time audio painting engine for SoundCanvas\r\n * Converts brush""}"
Source - 2.zip,Source/PaintQueue.h,.h,"{""sample"": ""#pragma once\r\n#include <atomic>\r\n#include <cstdint>\r\n\r\n/**\r\n * @brief Lock-free Single Producer Single Consumer (SPSC) queue for paint events\r\n * \r\n * RT-safe queue for passing paint data from UI thre""}"
Source - 2.zip,Source/ParamIDs.h,.h,"{""sample"": ""// Source/ParamIDs.h\n#pragma once\n\n//==============================================================================\n/**\n * Parameter ID Constants for 7-file core\n * Centralized parameter identifier de""}"
Source - 2.zip,Source/PluginMinimal/PluginProcessor.cpp,.cpp,"{""sample"": ""#include \""PluginMinimal/PluginProcessor.h\""\r\n#include <juce_gui_basics/juce_gui_basics.h>\r\n#include \""UIMinimal/SpectralCanvas.h\""\r\n\r\nclass MinimalEditor : public juce::AudioProcessorEditor, private juce""}"
Source - 2.zip,Source/PluginMinimal/PluginProcessor.h,.h,"{""sample"": ""#pragma once\r\n#include <juce_audio_processors/juce_audio_processors.h>\r\n#include \""CoreMinimal/Types.h\""\r\n#include \""DSPMinimal/STFTProcessor.h\""\r\n#include \""DSPMinimal/MaskGrid.h\""\r\n\r\nclass SpectralCanvasP""}"
Source - 2.zip,Source/ProfessionalErrorDialog.cpp,.cpp,"{""sample"": ""/******************************************************************************\r\n * File: ProfessionalErrorDialog.cpp\r\n * Description: Implementation of professional error dialog\r\n * \r\n * Vintage DAW-""}"
Source - 2.zip,Source/ProfessionalErrorDialog.h,.h,"{""sample"": ""/******************************************************************************\r\n * File: ProfessionalErrorDialog.h\r\n * Description: Professional error dialog for SPECTRAL CANVAS PRO\r\n * \r\n * Vintage ""}"
Source - 2.zip,Source/ProfessionalKeyboardShortcuts.cpp,.cpp,"{""sample"": ""/******************************************************************************\r\n * File: ProfessionalKeyboardShortcuts.cpp\r\n * Description: Implementation of professional keyboard shortcuts system\r\n ""}"
Source - 2.zip,Source/ProfessionalKeyboardShortcuts.h,.h,"{""sample"": ""/******************************************************************************\r\n * File: ProfessionalKeyboardShortcuts.h\r\n * Description: Professional keyboard shortcuts system for SPECTRAL CANVAS PR""}"
Source - 2.zip,Source/SoundRenderer.cpp,.cpp,"{""sample"": ""#include \""SoundRenderer.h\""\r\n#include <cmath>\r\n\r\nvoid SoundRenderer::renderFromCanvas(const std::vector<PaintStroke>& strokes,\r\n    juce::AudioBuffer<float>& buffer,\r\n    int sampleRate,\r\n    float dur""}"
Source - 2.zip,Source/SoundRenderer.h,.h,"{""sample"": ""#pragma once\r\n#include <JuceHeader.h>\r\n#include \""CanvasComponent.h\""\r\n\r\nnamespace SoundRenderer\r\n{\r\n    void renderFromCanvas(const std::vector<PaintStroke>& strokes,\r\n        juce::AudioBuffer<float>&""}"
Source - 2.zip,Source/Spectral/STFTEngine.cpp,.cpp,"{""sample"": ""#include \""STFTEngine.h\""\r\n#include <algorithm>\r\n#include <cmath>\r\n\r\nnamespace SpectralCanvas {\r\nnamespace spectral {\r\n\r\nvoid STFTEngine::prepare(double sampleRate, const STFTConfig& config) {\r\n    conf""}"
Source - 2.zip,Source/Spectral/STFTEngine.h,.h,"{""sample"": ""#pragma once\r\n#include <juce_audio_basics/juce_audio_basics.h>\r\n\r\nnamespace SpectralCanvas {\r\nnamespace spectral {\r\n\r\nstruct STFTConfig {\r\n    int fftSize;\r\n    int hopSize;\r\n    int channels;\r\n};\r\n\r\n""}"
Source - 2.zip,Source/SpectralCanvasApp.h,.h,"{""sample"": ""#pragma once\r\n#include <JuceHeader.h>\r\n#include \""MainComponent.h\""\r\n#include \""Core/Config.h\""\r\n\r\nclass SpectralCanvasApp : public juce::JUCEApplication\r\n{\r\npublic:\r\n    const juce::String getApplication""}"
Source - 2.zip,Source/SpectralCanvasProAudioProcessor.cpp,.cpp,"{""sample"": ""#include \""SpectralCanvasProAudioProcessor.h\""\n#include \""SpectralCanvasProEditor.h\""\n#include \""Core/DiagnosticLogger.h\""\n#include \""Core/ColumnOps.h\""\n#include <chrono>\n\nSpectralCanvasProAudioProcessor::Spe""}"
Source - 2.zip,Source/SpectralCanvasProAudioProcessor.h,.h,"{""sample"": ""#pragma once\n\n#include <juce_audio_processors/juce_audio_processors.h>\n#include <juce_dsp/juce_dsp.h>\n// New spectral pipeline headers\n#include \""Audio/SampleManager.h\""\n#include \""DSP/SpectralModel.h\""\n#""}"
Source - 2.zip,Source/SpectralCanvasProEditor.cpp,.cpp,"{""sample"": ""#include \""SpectralCanvasProEditor.h\""\n#include \""Core/Params.h\""\n#include \""Core/DiagnosticLogger.h\""\n#include \""Viz/backends/D3D11Renderer.h\""\n\nSpectralCanvasProEditor::SpectralCanvasProEditor(SpectralCanva""}"
Source - 2.zip,Source/SpectralCanvasProEditor.h,.h,"{""sample"": ""#pragma once\r\n\r\n#include <juce_gui_basics/juce_gui_basics.h>\r\n#include \""SpectralCanvasProAudioProcessor.h\""\r\n#include \""GUI/CanvasComponent.h\""\r\n#include \""GUI/MinimalTopStrip.h\""\r\n#include \""GUI/PerfHUD.h\""""}"
Source - 2.zip,Source/SpectralPaintProcessor.cpp,.cpp,"{""sample"": ""#include \""SpectralPaintProcessor.h\""\r\n#include <algorithm>\r\n\r\nSpectralPaintProcessor::SpectralPaintProcessor()\r\n    : spectralNode_(std::make_unique<nodes::SpectralPaintNode>())\r\n{\r\n}\r\n\r\nvoid SpectralP""}"
Source - 2.zip,Source/SpectralPaintProcessor.h,.h,"{""sample"": ""#pragma once\r\n\r\n#include <juce_audio_processors/juce_audio_processors.h>\r\n#include <memory>\r\n#include \""nodes/SpectralPaintNode.h\""\r\n\r\n/**\r\n * @file SpectralPaintProcessor.h\r\n * @brief JUCE AudioProcess""}"
Source - 2.zip,Source/TrackerDrumSequencer.h,.h,"{""sample"": ""/******************************************************************************\r\n * File: TrackerDrumSequencer.h\r\n * Description: Revolutionary tracker-style linear drumming sequencer\r\n * \r\n * SPECTRA""}"
Source - 2.zip,Source/TrackerPatternComponent.cpp,.cpp,"{""sample"": ""/******************************************************************************\r\n * File: TrackerPatternComponent.cpp\r\n * Description: Revolutionary FastTracker2/ProTracker-style pattern editor implem""}"
Source - 2.zip,Source/TrackerPatternComponent.h,.h,"{""sample"": ""/******************************************************************************\r\n * File: TrackerPatternComponent.h\r\n * Description: Revolutionary FastTracker2/ProTracker-style pattern editor\r\n * \r\n *""}"
Source - 2.zip,Source/UI/SpectralCanvasProEditor.cpp,.cpp,"{""sample"": ""#include \""SpectralCanvasProEditor.h\""\r\n\r\nSpectralCanvasProEditor::SpectralCanvasProEditor(SpectralCanvasProProcessor& p)\r\n    : AudioProcessorEditor(&p), processor(p)\r\n{\r\n    setSize(400, 300);\r\n}\r\n\r\nS""}"
Source - 2.zip,Source/UI/SpectralCanvasProEditor.h,.h,"{""sample"": ""#pragma once\r\n#include <JuceHeader.h>\r\n#include \""SpectralCanvasProProcessor.h\""\r\n\r\nclass SpectralCanvasProEditor : public juce::AudioProcessorEditor\r\n{\r\npublic:\r\n    explicit SpectralCanvasProEditor(Sp""}"
Source - 2.zip,Source/VintageProLookAndFeel.cpp,.cpp,"{""sample"": ""/******************************************************************************\r\n * File: VintageProLookAndFeel.cpp\r\n * Description: Implementation of authentic vintage pro audio LookAndFeel\r\n * \r\n * ""}"
Source - 2.zip,Source/VintageProLookAndFeel.h,.h,"{""sample"": ""/******************************************************************************\r\n * File: VintageProLookAndFeel.h\r\n * Description: Custom LookAndFeel for authentic vintage pro audio aesthetics\r\n * \r\n ""}"
emu_extracted - 1.zip,emu_extracted/banks/Orbit3_Authentic.json,.json,"{""json_keys"": [""meta"", ""presets""], ""type"": ""object""}"
emu_extracted - 1.zip,emu_extracted/banks/PlanetPhatt_Authentic.json,.json,"{""json_keys"": [""meta"", ""presets""], ""type"": ""object""}"
emu_extracted - 1.zip,emu_extracted/banks/XtremeLead1_Authentic.json,.json,"{""json_keys"": [""meta"", ""presets""], ""type"": ""object""}"
emu_extracted - 1.zip,emu_extracted/CMakeLists.txt,.txt,"{""headings"": [""EMU Z-Plane Library\r"", ""Optional: JUCE Plugin Integration Example\r"", ""Installation\r""], ""bullets"": []}"
emu_extracted - 1.zip,emu_extracted/EMUFilter.cpp,.cpp,"{""sample"": ""#include \""EMUFilter.h\""\r\n#include <cmath>\r\n\r\n#ifndef M_PI\r\n#define M_PI 3.14159265358979323846\r\n#endif\r\n\r\nnamespace\r\n{\r\n    // Anonymous namespace for constants to limit their scope to this file.\r\n    ""}"
emu_extracted - 1.zip,emu_extracted/EMUFilter.h,.h,"{""sample"": ""#pragma once\r\n#include <juce_audio_basics/juce_audio_basics.h>\r\n#include <juce_core/juce_core.h>\r\n#include <array>\r\n#include <complex>\r\n\r\n/**\r\n * Authentic EMU Audity 2000 Z-Plane Morphing Filter\r\n * ""}"
emu_extracted - 1.zip,emu_extracted/emu_extracted.zip,.zip,kept (non-text)
emu_extracted - 1.zip,emu_extracted/emu_zplane_api.h,.h,"{""sample"": ""// emu_zplane_api.h  -- single-file entry point (LLM-friendly)\r\n#pragma once\r\n#ifdef _WIN32\r\n  #ifdef EMU_EXPORTS\r\n    #define EMU_API __declspec(dllexport)\r\n  #else\r\n    #define EMU_API __declspec(dl""}"
emu_extracted - 1.zip,emu_extracted/FieldEngineFXProcessor.cpp,.cpp,"{""sample"": ""#include \""FieldEngineFXProcessor.h\""\n#include \""FieldEngineFXEditor.h\""\n#include \""../ui/ViralEditor.h\""\n#include <map>\n#include \""../shared/ZPlaneTables.h\""\n#include <cmath>\n#include <algorithm>\n\nnamespace ""}"
emu_extracted - 1.zip,emu_extracted/index.csv,.csv,"{""columns"": [""symbol"", ""file"", ""line_start"", ""line_end"", ""summary""], ""rows_previewed"": 5}"
emu_extracted - 1.zip,emu_extracted/manifest.json,.json,"{""json_keys"": [""project"", ""version"", ""sampleRateRef"", ""entry_header"", ""files"", ""examples"", ""shape_pairs"", ""units""], ""type"": ""object""}"
emu_extracted - 1.zip,emu_extracted/README.md,.md,"{""headings"": [], ""bullets"": [""Each \""shape\"" = 6 complex pole pairs stored as 12 floats [r,theta] (r ~ 0..1, theta radians).\r"", ""Engine: interpolate shapeA->shapeB by morph (0..1), scale radius by intensity, convert each conjugate-pair to biquad (a1,a2) and a normalized numerator.\r"", ""Implementation files:\r"", ""EMUFilter.h : authentic tables\r"", ""AuthenticEMUZPlane.cpp : conversion & interpolation code (use verbatim)\r"", ""ZPlaneFilter.h : core Z-plane mathematics\r"", ""emu_zplane_api.h : minimal C ABI – recommended entry point for LLM\r"", ""Test: run sweep/impulse and compare IRs for A/B parity.\r"", ""emu_zplane_api.h : C API entry point (start here)\r"", ""manifest.json : file map and examples (LLM navigation)\r""]}"
